using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Mail;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using Evect.Models.DB;
using Microsoft.EntityFrameworkCore;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;

namespace Evect.Models.Commands
{
    public class ActionHandler
    {
        private readonly CommandHandler _commandHadler = new CommandHandler();
        
        [UserAction(Actions.None)] 
        public async void OnNone(Message message, TelegramBotClient client)
        {
            var commands = Bot.Commands;
            var chatId = message.Chat.Id;
            var text = message.Text;

            foreach (var pair in commands)
            {
                if (pair.Value == text)
                {
                    pair.Key(message, client);
                    return;
                } 
            }



            await client.SendTextMessageAsync(
                chatId,
                "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å",
                ParseMode.Html);
        }

        
        [UserAction(Actions.WaitingForEventCode)]
        public async void OnWaitingEventCode(Message message, TelegramBotClient client)
        {
            var chatId = message.Chat.Id;
            var text = message.Text;
            EventDB eventDb = new EventDB();
            UserDB userDb = new UserDB();

            User user = await userDb.GetUserByChatId(chatId);
            
            bool isValid = await eventDb.IsEventCodeValid(text);
            if (isValid)
            {
                Event ev = await userDb.Context.Events.FirstOrDefaultAsync(e =>
                    e.EventCode == text || e.AdminCode == text);
                
                bool have = user.UserEvents.FirstOrDefault(ue => ue.EventId == ev.EventId) != null;
                
                bool isAdminCode = await eventDb.IsAdminCode(text);
                
                
                if(isAdminCode)
                {
                    string[][] adminActions = { new[] { "–û–± –∏–≤–µ–Ω—Ç–µ" }, new[] { "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö" }, new[] { "–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å" }, new[] { "–°–æ–∑–¥–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ" } };
                    userDb.AdminAuthorized(chatId);
                    userDb.ChangeUserAction(chatId, Actions.AdminMode);
                    if(!have)
                    {
                        UserEvent userEvent = new UserEvent() { UserId = user.UserId, EventId = ev.EventId };
                        user.UserEvents.Add(userEvent);
                        user.CurrentEventId = ev.EventId;
                        //–ø–æ—á–µ–º—É –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç,–∫–æ–≥–¥–∞ —ç—Ç–æ —Ä–∞—Å–∫–æ–º–µ–Ω—á–µ–Ω–æ?
                        userDb.Context.Users.Update(user);
                        await userDb.Context.SaveChangesAsync();
                    }
                    await client.SendTextMessageAsync(chatId, $"–í–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ \"{ev.Name}\"" + "üòá".ToString() + "\n" + "–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:\n\n" + "0Ô∏è‚É£".ToString() + "<b>–û–± –∏–≤–µ–Ω—Ç–µ</b>- –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏" + "1Ô∏è‚É£".ToString() + "–ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å <b>–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º</b>" + "2Ô∏è‚É£".ToString() + "<b>–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å</b>- –æ–ø—Ä–æ—Å —Ä–∞—Å—Å—ã–ª–∞–µ—Ç—Å—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º, —Ç–∏–ø –æ–ø—Ä–æ—Å–∞- –æ—Ü–µ–Ω–∫–∞ –æ—Ç 1 –¥–æ 5"+ "3Ô∏è‚É£".ToString()+"<b>–°–æ–∑–¥–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ</b>- —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º",ParseMode.Html, replyMarkup:TelegramKeyboard.GetKeyboard(adminActions));                  
                }
                else
                {
                    if (have)
                    {
                        await client.SendTextMessageAsync(
                            chatId,
                            "–í—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —ç—Ç–æ–º—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é",
                            ParseMode.Html); 
                        
                        
                        userDb.ChangeUserAction(chatId, Actions.Profile);
                        string[][] actions = { new[] { "–û –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏", "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é" }, new[] {"–†–µ–∂–∏–º –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–∞"}, new[] {"–ó–∞–ø–∏—Å–Ω–∞—è –∫–Ω–∏–∂–∫–∞"}, new[] {"–í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"} };
                        await client.SendTextMessageAsync(
                            chatId,
                            "–ß—Ç–æ –Ω—É–∂–Ω–æ?",
                            ParseMode.Html,
                            replyMarkup: TelegramKeyboard.GetKeyboard(actions));
                    }
                    else
                    {

                        UserEvent userEvent = new UserEvent()
                        {
                            UserId = user.UserId,
                            EventId = ev.EventId
                        };
                        
                        user.UserEvents.Add(userEvent);
                        user.CurrentEventId = ev.EventId;
                        userDb.Context.Users.Update(user);
                        await userDb.Context.SaveChangesAsync();

                        
                        
                        await client.SendTextMessageAsync(
                            chatId,
                            $"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é: {ev.Name}",
                            ParseMode.Html); 
                        
                        
                        
                        if (string.IsNullOrEmpty(user.FirstName) || string.IsNullOrEmpty(user.LastName))//–∑–¥–µ—Å—å –º–± —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∞–¥–º–∏–Ω—Å–∫–∏–π –ª–∏ –∫–æ–¥
                        {
                            await client.SendTextMessageAsync(
                                chatId,
                                "–ü–æ—Ö–æ–∂–µ –º—ã –Ω–µ –≤—Å–µ –æ –≤–∞—Å –∑–Ω–∞–µ–º. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? –ü–æ–ø—Ä–æ—à—É –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª",
                                ParseMode.Html);
                            userDb.ChangeUserAction(chatId, Actions.WaitingForName);
                        } else if (string.IsNullOrEmpty(user.Email))
                        {
                            await client.SendTextMessageAsync(
                                chatId,
                                "–í–æ—Ç –º—ã –∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å, –∞ —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã?",
                                ParseMode.Html);
                            userDb.ChangeUserAction(chatId, Actions.WainingForEmail);
                        }
                        else
                        {
                            string[][] actions = { new[] { "–û –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏", "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é" }, new[] {"–†–µ–∂–∏–º –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–∞"}, new[] {"–ó–∞–ø–∏—Å–Ω–∞—è –∫–Ω–∏–∂–∫–∞"}, new[] {"–í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"} };
                            await client.SendTextMessageAsync(
                                chatId,
                                "–ß—Ç–æ –Ω—É–∂–Ω–æ?",
                                ParseMode.Html,
                                replyMarkup: TelegramKeyboard.GetKeyboard(actions));
                    
                            userDb.ChangeUserAction(chatId, Actions.Profile);
                        }
                    
                        
                    }
                }
                

            }
            else
            {
                await client.SendTextMessageAsync(
                    chatId,
                    $"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥(",
                    ParseMode.Html);
            }
        }
        [UserAction(Actions.AdminMode)]
        public async void AdminMode(Message message,TelegramBotClient client)
        {
            if(message.Text=="–û–± –∏–≤–µ–Ω—Ç–µ")
            {
                EventDB eventDB = new EventDB();
                long chatId = message.Chat.Id;
                UserDB userDb = new UserDB();
                User user = await userDb.GetUserByChatId(chatId);
                if (!user.IsAdminAuthorized)
                {
                    await client.SendTextMessageAsync(chatId, "–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –ø–æ–∫–∞");
                }
                else
                {
                    string[][] back = { new[] { "–ù–∞–∑–∞–¥" } };

                   userDb.ChangeUserAction(chatId, Actions.GetInformationAboutTheEvent);
                    string info = eventDB.GetInfoAboutTheEvent(chatId);
                    await client.SendTextMessageAsync(chatId, info, replyMarkup: TelegramKeyboard.GetKeyboard(back));
                }
            }
           /* if(message.Text=="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö")
            {

            }*/
           else if(message.Text=="–°–æ–∑–¥–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ")
            {
                //EventDB eventDB = new EventDB();
                long chatId = message.Chat.Id;
                UserDB userDb = new UserDB();
                
                    string[][] back = { new[] { "–ù–∞–∑–∞–¥" } };
                    userDb.ChangeUserAction(chatId, Actions.CreateNotification);
                    await client.SendTextMessageAsync(chatId, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,–æ–Ω–æ –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", replyMarkup: TelegramKeyboard.GetKeyboard(back));
                
            }
            /*if(message.Text=="–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å")
            {

            }*/
        }
        [UserAction(Actions.GetInformationAboutTheEvent)]
        public async void InformationAboutTheEvent(Message message,TelegramBotClient client)
        {
            var chatId = message.Chat.Id;
            var text = message.Text;
            UserDB userDb = new UserDB();
            if(text=="–ù–∞–∑–∞–¥")
            {
               string [][] menu = { new[] { "–û–± –∏–≤–µ–Ω—Ç–µ" }, new[] { "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö" }, new[] { "–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å" }, new[] { "–°–æ–∑–¥–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ" } };
                userDb.ChangeUserAction(chatId, Actions.AdminMode);
                await client.SendTextMessageAsync(chatId, "–Ø –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", replyMarkup: TelegramKeyboard.GetKeyboard(menu));
            }
            else
            {
                EventDB eventDb = new EventDB();
                eventDb.AddInformationAboutEvent(chatId,text);
                await client.SendTextMessageAsync(chatId, "–î–∞–Ω–Ω—ã–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã");
            }
            
        }
       
        [UserAction(Actions.WaitingForName)]
        public async void OnWaitingForName(Message message, TelegramBotClient client)
        {
            var chatId = message.Chat.Id;
            var text = message.Text;
            EventDB eventDb = new EventDB();
            UserDB userDb = new UserDB();

            User user = await userDb.GetUserByChatId(chatId);

            var names = text.Split(' ');
            if (names.Length == 2)
            {
                user.FirstName = names[0];
                user.LastName = names[1];
                userDb.Context.Update(user);
                await userDb.Context.SaveChangesAsync();
                if (string.IsNullOrEmpty(user.Email))
                {
                    await client.SendTextMessageAsync(
                        chatId,
                        "–í–æ—Ç –º—ã –∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å, –∞ —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã?",
                        ParseMode.Html);
                    userDb.ChangeUserAction(chatId, Actions.WainingForEmail);
                }
            }
            else
            {
                await client.SendTextMessageAsync(
                    chatId,
                    "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é",
                    ParseMode.Html);
            }
        }

        [UserAction(Actions.WainingForEmail)]
        public async void OnWaitingForEmail(Message message, TelegramBotClient client)
        {
            var chatId = message.Chat.Id;
            var text = message.Text;
            UserDB userDb = new UserDB();

            User user = await userDb.GetUserByChatId(chatId);
            
            if (Utils.IsEmailValid(text))
            {
                user.Email = text;
                userDb.Context.Update(user);
                await userDb.Context.SaveChangesAsync();
                
                string[][] actions = { new[] { "–û –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏", "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é" }, new[] {"–†–µ–∂–∏–º –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–∞"}, new[] {"–ó–∞–ø–∏—Å–Ω–∞—è –∫–Ω–∏–∂–∫–∞"}, new[] {"–í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"} };

                await client.SendTextMessageAsync(
                    chatId,
                    "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –≤–µ—Å—å –º–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª",
                    ParseMode.Html,
                    replyMarkup: TelegramKeyboard.GetKeyboard(actions));
                userDb.ChangeUserAction(chatId, Actions.Profile);
            }
            else
            {
                await client.SendTextMessageAsync(
                    chatId,
                    "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—á—Ç—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
                    ParseMode.Html);
            }
            
        }
        
        [UserAction(Actions.DeleteOrNot)]
        public async void OnDeleteOrNot(Message message, TelegramBotClient client)
        {
            var chatId = message.Chat.Id;
            var text = message.Text;
            UserDB userDb = new UserDB();

            User user = await userDb.GetUserByChatId(chatId);
            
            if (text == "–î–∞")
            {
                userDb.UserLogoff(chatId);
                userDb.ResetAction(chatId);
                await client.SendTextMessageAsync(
                    chatId,
                    "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è evectbot, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –Ω–∞–ø–∏—à–∏—Ç–µ <em>/start</em>",
                    ParseMode.Html);
            }
            else if (text == "–ù–µ—Ç")
            {
                userDb.Context.Users.Remove(user);
                await userDb.Context.SaveChangesAsync();
                await client.SendTextMessageAsync(
                    chatId,
                    "–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –Ω–∞–ø–∏—à–∏—Ç–µ <em>/start</em>",
                    ParseMode.Html);
            }
            else
            {
                await client.SendTextMessageAsync(
                    chatId,
                    "–î–∞/–ù–µ—Ç",
                    ParseMode.Html);
            }
        }
        
        
        [UserAction(Actions.Profile)]
        public async void OnProfile(Message message, TelegramBotClient client)
        {
            UserDB userDb = new UserDB();
            EventDB eventDb = new EventDB();
            var chatId = message.Chat.Id;
            var text = message.Text;

            User user = await userDb.GetUserByChatId(chatId);
            StringBuilder builder = new StringBuilder();

            switch (text)
            {
                case "–û –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏":
                    bool isReg = user.CurrentEventId > 0;
                    if (isReg)
                    {
                        Event ev = userDb.Context.Events.Find(user.CurrentEventId);
                        builder.Clear();

                        builder.AppendLine($"<b>–ù–∞–∑–≤–∞–Ω–∏–µ: </b>{ev.Name}");
                        builder.AppendLine($"–î–ª—è –≤–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞ –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ —Å—Ç–∞—Ç—å—é –≤ Telegraph: {ev.TelegraphLink}");

                        await client.SendTextMessageAsync(
                            chatId,
                            builder.ToString(),
                            ParseMode.Html);
                        string[][] actions = { new[] { "–û –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏", "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é" }, new[] {"–†–µ–∂–∏–º –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–∞"}, new[] {"–ó–∞–ø–∏—Å–Ω–∞—è –∫–Ω–∏–∂–∫–∞"}, new[] {"–í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"} };
                        await client.SendTextMessageAsync(chatId, "–ß—Ç–æ –Ω—É–∂–Ω–æ?",ParseMode.Html,replyMarkup:TelegramKeyboard.GetKeyboard(actions, true));
                    }
                    else
                    {
                        await client.SendTextMessageAsync(
                            chatId,
                            $"–í—ã –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –Ω–∏ –∫ –æ–¥–Ω–æ–º—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é",
                            ParseMode.Html);
                    }
                    break;
                
                case "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é":
                    await client.SendTextMessageAsync(
                        chatId,
                        "–í–µ–µ–¥–∏—Ç–µ –∏–≤–µ–Ω—Ç –∫–æ–¥",
                        ParseMode.Html);
                    userDb.ChangeUserAction(chatId, Actions.WaitingForEventCode);
                    break;
                
                
                case "–í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
                    builder.Clear();
                    for (int i = 0; i < user.UserEvents.Count; i++)
                    {
                        Event ev = await eventDb.GetEventByUserEvent(user.UserEvents[i]);
                        string cur = user.CurrentEventId == ev.EventId ? "<em>(–¢–µ–∫—É—â–µ–µ)</em>" : "";
                        builder.AppendLine($"<b>{i+1}:</b> {ev.Name} {cur}");
                    }

                    var data = new string[][] {new string[] {"1", "2", "3", "4"}};
                    var data1 = new string[][] {new string[] {"anime", "colbek1", "colbek2", "meow"}};
                    await client.SendTextMessageAsync(
                        chatId,
                        builder.ToString(),
                        ParseMode.Html,
                        replyMarkup: TelegramKeyboard.GetInlineKeyboard(data, data1));
                    break;
                
                case "–†–µ–∂–∏–º –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–∞":
                    if (user.CompanyAndPosition != null) // TODO: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                    {
                        userDb.ChangeUserAction(chatId, Actions.FirstQuestion);
                        
                        // Phrase shows user that mode has changed
                        await client.SendTextMessageAsync(
                            chatId,
                            "**–ì–¥–µ –∏ –∫–µ–º –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ? [1/3]**\n\n–î–ª—è **—Ä–µ–∂–∏–º–∞ –æ–±—â–µ–Ω–∏—è** –∂–∏–∑–Ω–µ–Ω–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è ‚Äì **3 –≤–æ–ø—Ä–æ—Å–∞ –∏ 2 —ç—Ç–∞–ø–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–æ–≤** (—Ç–µ–≥ ‚Äì —Å—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞, —É–ø—Ä–æ—â–∞–µ—Ç –ø–æ–∏—Å–∫ –Ω—É–∂–Ω—ã—Ö –≤–∞–º –ª—é–¥–µ–π).\n\n–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º üôÉ",
                            ParseMode.Markdown);
                        // First question
                        await client.SendTextMessageAsync(
                            chatId,
                            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ª—é–¥—è–º –ø–æ–Ω—è—Ç—å, —á–µ–º –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –∏–º –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω. –ü—Ä–∏—à–ª–∏ –º–Ω–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ —Ç–≤–æ—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å. __–ù–∞–ø—Ä–∏–º–µ—Ä__, \"–î–∏–∑–∞–π–Ω–µ—Ä –≤ –Ø–Ω–¥–µ–∫—Å\"",
                            ParseMode.Markdown);
                    }
                    else
                    {
                        userDb.ChangeUserAction(chatId, Actions.Networking);   
                    }

                    break;

                default:
                    await client.SendTextMessageAsync(
                        chatId,
                        "—á–æ—Ç –Ω–µ —Ç–æ",
                        ParseMode.Html);
                    break;
            }
        }

        #region Network mode
        [UserAction(Actions.FirstQuestion)]
        public async void OnFirstQuestion(Message message, TelegramBotClient client)
        {
            var chatId = message.Chat.Id;
            var text = message.Text;
            UserDB userDb = new UserDB();

            User user = await userDb.GetUserByChatId(chatId);

            user.CompanyAndPosition = text;
            
            userDb.ChangeUserAction(chatId, Actions.SecondQuestion);
            await client.SendTextMessageAsync(
                chatId, "–¢–µ–ø–µ—Ä—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ãüòú \n**–ß–µ–º –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã? [2/3]**", ParseMode.Markdown);
        }

        [UserAction(Actions.SecondQuestion)]
        public async void OnSecondQuestion(Message message, TelegramBotClient client)
        {
            var chatId = message.Chat.Id;
            var text = message.Text;
            UserDB userDb = new UserDB();

            User user = await userDb.GetUserByChatId(chatId);

            user.Utility = text;

            userDb.ChangeUserAction(chatId, Actions.ThirdQuestion);
            await client.SendTextMessageAsync(
                chatId, "–ë–æ–ª–µ–µ –æ—Ç–≤–ª–µ—á—ë–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Åü§ó\n**–û —á–µ–º –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–æ–±—â–∞—Ç—å—Å—è? [3/3]**\n–¢–µ–º—ã —Ä–∞–±–æ—á–∏–µ –∏ –Ω–µ –æ—á–µ–Ω—å", ParseMode.Markdown);
        }
        
        [UserAction(Actions.ThirdQuestion)]
        public async void OnThirdQuestion(Message message, TelegramBotClient client)
        {
            var chatId = message.Chat.Id;
            var text = message.Text;
            UserDB userDb = new UserDB();
            User user = await userDb.GetUserByChatId(chatId);
            
            string[][] ans = {new[] {""}}; // Array of this Parent Tags (will be in DB, I guess)
            
            user.Communication = text;

            userDb.ChangeUserAction(chatId, Actions.AddingParentTag);
            await client.SendTextMessageAsync(
                chatId, "üòã –•–æ—Ä–æ—à–æ, –ø–µ—Ä–µ–π–¥—ë–º –∫ **—Ç–µ–≥–∞–º**." +
                        "\n\n–ü–æ —Ç–µ–≥–∞–º –º–æ–∂–Ω–æ –ª–µ–≥–∫–æ –∏ —É–¥–æ–±–Ω–æ __—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å__ –Ω—É–∂–Ω—ã—Ö –≤–∞–º –ª—é–¥–µ–π. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–∏—Ä–∞—é—Ç—Å—è –≥—Ä—É–ø–ø—ã —Ç–µ–≥–æ–≤, –Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ **–¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥** –º–æ–∂–Ω–æ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å—Å—è –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–æ–π" +
                        "\n\n–í—ã –º–æ–∂–µ—Ç–µ –∏—Ö –º–µ–Ω—è—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å" +
                        "\n\n–ê —Å–µ–π—á–∞—Å –≤—ã–±–µ—Ä–∏—Ç–µ –í–ê–®–ò —Ç–µ–≥–∏ (–ø–æ–¥—Ö–æ–¥—è—Ç –ª–∏—á–Ω–æ **–í–ê–ú**) **[1/2]**", 
                ParseMode.Markdown, replyMarkup: TelegramKeyboard.GetKeyboard(ans, true));
        }

        [UserAction(Actions.AddingParentTag)]
        public async void OnAddingTags(Message message, TelegramBotClient client)
        {
            // Add one tag and than more tags (next Action.ChoosingTags)
            var chatId = message.Chat.Id;
            var text = message.Text;
            UserDB userDb = new UserDB();
            User user = await userDb.GetUserByChatId(chatId);

            string[][] tags = {new[] {""}, new []{""}}; // Array of Tags of this Parent Tag (will be in DB, I guess) for INLINE keyboard
            string[][] callbackData = {new[] {""}};
            string[][] ans = {new[] {"–û–∫"}, new []{"–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥"}, new []{"–í—ã–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ"}}; // Variants of actions
            
            // TODO: Add inline keyboard (tags)

            await client.SendTextMessageAsync(
                chatId, "–í–∞—à–∏ —Ç–µ–≥–∏:", ParseMode.Markdown, // Editing while choosing tags?
                replyMarkup: TelegramKeyboard.GetInlineKeyboard(tags, callbackData));
            
            await client.SendTextMessageAsync(
                chatId, "–í–∞—à–∏ —Ç–µ–≥–∏:", ParseMode.Markdown, // Editing while choosing tags?
                replyMarkup: TelegramKeyboard.GetKeyboard(ans, true));
            
            userDb.ChangeUserAction(chatId, Actions.ChoosingTags);
        }

        [UserAction(Actions.ChoosingTags)]
        public async void OnChoosingTags(Message message, TelegramBotClient client)
        {
            var chatId = message.Chat.Id;
            var text = message.Text;
            UserDB userDb = new UserDB();
            User user = await userDb.GetUserByChatId(chatId);
            
            // Gets users callbacks from inline keyboard and receiving answers from normal keyboard
            switch (text)
            {
                case "–û–ö": // Starts Action with setting searching tags
                    break;
                
                case "–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥": // ???
                    break;
                
                case "–í—ã–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ": // Returns to Action with Parent Tags? Deletes all tags that user has now
                    userDb.ChangeUserAction(chatId, Actions.AddingParentTag);
                    string[][] ans = {new[] {""}}; // Array of this Parent Tags (will be in DB, I guess)
                    
                    await client.SendTextMessageAsync(
                        chatId, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∞–ª—å–Ω–æ—Å—Ç—å:", ParseMode.Markdown, // Editing while choosing tags?
                        replyMarkup: TelegramKeyboard.GetKeyboard(ans, true));
                    break;
            }
        }
        #endregion
    }
}