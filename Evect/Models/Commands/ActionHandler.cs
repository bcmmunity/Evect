using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Mail;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using Evect.Models.DB;
using Microsoft.EntityFrameworkCore;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;

namespace Evect.Models.Commands
{
    public class ActionHandler
    {
        private readonly CommandHandler _commandHadler = new CommandHandler();

        [UserAction(Actions.None)]
        public async Task OnNone(ApplicationContext context, Message message, TelegramBotClient client)
        {
            var commands = Bot.Commands;
            var chatId = message.Chat.Id;
            var text = message.Text;
            
            try
            {
                await commands[text](context, message, client);
                return;
            }
            catch (KeyNotFoundException e)
            {
                Console.WriteLine("\n\n\n\n\n");
                Console.WriteLine("no method for this text");
                Console.WriteLine("\n\n\n\n\n");

            }


            await client.SendTextMessageAsync(
                chatId,
                "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å",
                ParseMode.Markdown);
        }


        [UserAction(Actions.WaitingForEventCode)]
        public async Task OnWaitingEventCode(ApplicationContext context, Message message, TelegramBotClient client)
        {
            var chatId = message.Chat.Id;
            var text = message.Text;
            EventDB eventDb = new EventDB();


            User user = await UserDB.GetUserByChatId(context, chatId);


            bool isValid = await eventDb.IsEventCodeValid(text);
            if (isValid)
            {
                Event ev = await context.Events.FirstOrDefaultAsync(e =>
                    e.EventCode == text || e.AdminCode == text);

                bool have = user.UserEvents.FirstOrDefault(ue => ue.EventId == ev.EventId) != null;

                bool isAdminCode = await eventDb.IsAdminCode(text);


                if (isAdminCode)
                {
                    if (!have)
                    {
                        UserEvent userEvent = new UserEvent() {UserId = user.UserId, EventId = ev.EventId};
                        user.UserEvents.Add(userEvent);
                        user.CurrentEventId = ev.EventId;
                        //–ø–æ—á–µ–º—É –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç,–∫–æ–≥–¥–∞ —ç—Ç–æ —Ä–∞—Å–∫–æ–º–µ–Ω—á–µ–Ω–æ?
                        context.Users.Update(user);
                        context.SaveChanges();
                    }

                    await UserDB.AdminAuthorized(context, chatId);
                    if (user.Email == null)
                    {
                        await UserDB.ChangeUserAction(context, chatId, Actions.WainingForEmail);
                        await client.SendTextMessageAsync(chatId, "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—é –ø–æ—á—Ç—É");
                        await UserDB.AdminAuthorized(context, chatId);
                    }
                    else
                    {
                        TelegramKeyboard keyboard = new TelegramKeyboard();
                        keyboard.AddRow("–û–± –∏–≤–µ–Ω—Ç–µ");
                        keyboard.AddRow("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö");
                        keyboard.AddRow("–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å");
                        keyboard.AddRow("–°–æ–∑–¥–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ");
                        keyboard.AddRow("–í–æ–π—Ç–∏ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫");
                         await UserDB.ChangeUserAction(context, chatId, Actions.AdminMode);
                        if (!have)
                        {
                            TimeToJoinToEvent time = new TimeToJoinToEvent();
                            time.TelegramId = chatId;
                            time.EventId = ev.EventId;
                            time.time = DateTime.Now;
                            context.TimeToJoinToEvents.Add(time);
                           
                            UserEvent userEvent = new UserEvent() {UserId = user.UserId, EventId = ev.EventId};
                            user.UserEvents.Add(userEvent);
                            user.CurrentEventId = ev.EventId;
                            //–ø–æ—á–µ–º—É –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç,–∫–æ–≥–¥–∞ —ç—Ç–æ —Ä–∞—Å–∫–æ–º–µ–Ω—á–µ–Ω–æ?
                            context.Users.Update(user);
                            context.SaveChanges();
                        }

                        StringBuilder builder = new StringBuilder();
                        builder.AppendLine($"–í–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ \"{ev.Name}\"");
                        //                    builder.AppendLine(@"üòá" + "\n" + "–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:");
                        //                    builder.AppendLine("0");
                        //                    builder.AppendLine("<b>–û–± –∏–≤–µ–Ω—Ç–µ</b>- –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏");
                        //                    builder.AppendLine("1");
                        //                    builder.AppendLine("–ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å <b>–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º</b");
                        //                    builder.AppendLine("2" );
                        //                    builder.AppendLine("<b>–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å</b>- –æ–ø—Ä–æ—Å —Ä–∞—Å—Å—ã–ª–∞–µ—Ç—Å—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º, —Ç–∏–ø –æ–ø—Ä–æ—Å–∞- –æ—Ü–µ–Ω–∫–∞ –æ—Ç 1 –¥–æ 5");
                        //                    builder.AppendLine("3");
                        //                    builder.AppendLine("<b>–°–æ–∑–¥–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ</b>- —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º");

                        await client.SendTextMessageAsync(chatId,
                            builder.ToString(),
                            ParseMode.Html, replyMarkup: keyboard.Markup);
                    }
                }
                else
                {
                    if (user.IsAdminAuthorized)
                        user.IsAdminAuthorized = false;
                    if (have)
                    {
                        await client.SendTextMessageAsync(
                            chatId,
                            "–í—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —ç—Ç–æ–º—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é",
                            ParseMode.Markdown);


                        await UserDB.ChangeUserAction(context, chatId, Actions.Profile);
                        TelegramKeyboard keyboard = new TelegramKeyboard();
                        keyboard.AddRow("–û –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏", "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é");
                        keyboard.AddRow("–†–µ–∂–∏–º –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–∞");
                        keyboard.AddRow("–ó–∞–ø–∏—Å–Ω–∞—è –∫–Ω–∏–∂–∫–∞");
                        keyboard.AddRow("–í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è");
                        await client.SendTextMessageAsync(
                            chatId,
                            "–ß—Ç–æ –Ω—É–∂–Ω–æ?",
                            ParseMode.Markdown,
                            replyMarkup: keyboard.Markup);
                    }
                    else
                    {
                        UserEvent userEvent = new UserEvent()
                        {
                            UserId = user.UserId,
                            EventId = ev.EventId
                        };

                        user.UserEvents.Add(userEvent);
                        user.CurrentEventId = ev.EventId;
                        context.Users.Update(user);
                        context.SaveChanges();


                        await client.SendTextMessageAsync(
                            chatId,
                            $"–í—ã –ø–æ–¥–∫–ª—é—á–∞–µ—Ç–µ—Å—å –∫ *{ev.Name}*",
                            ParseMode.Markdown);

                        StringBuilder builder = new StringBuilder();

                        if (string.IsNullOrEmpty(user.FirstName) || string.IsNullOrEmpty(user.LastName)
                        ) //–∑–¥–µ—Å—å –º–± —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∞–¥–º–∏–Ω—Å–∫–∏–π –ª–∏ –∫–æ–¥
                        {
                            await client.SendTextMessageAsync(
                                chatId,
                                "–ê —Ç–µ–ø–µ—Ä—å –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
                                ParseMode.Markdown);
                            await UserDB.ChangeUserAction(context, chatId, Actions.WaitingForName);
                        }
                        else if (string.IsNullOrEmpty(user.Email))
                        {
                            builder.AppendLine(@"–í–æ—Ç –º—ã –∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å‚úåÔ∏è");
                            builder.AppendLine("–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å *—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã*");
                            builder.AppendLine();
                            builder.AppendLine(
                                "ü§ñ –û–Ω –Ω—É–∂–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞—à–µ–≥–æ *–ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞*, –æ–Ω —É–ø—Ä–æ—Å—Ç–∏—Ç –≤—Ö–æ–¥ –≤ —Å–ª—É—á–∞–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞, –∞ —Ç–∞–∫–∂–µ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");

                            await client.SendTextMessageAsync(
                                chatId,
                                builder.ToString(),
                                ParseMode.Markdown);
                            await UserDB.ChangeUserAction(context, chatId, Actions.WainingForEmail);
                        }
                        else
                        {
                            TelegramKeyboard keyboard = new TelegramKeyboard();
                            keyboard.AddRow("–û –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏", "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é");
                            keyboard.AddRow("–†–µ–∂–∏–º –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–∞");
                            keyboard.AddRow("–ó–∞–ø–∏—Å–Ω–∞—è –∫–Ω–∏–∂–∫–∞");
                            keyboard.AddRow("–í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è");
                            await client.SendTextMessageAsync(
                                chatId,
                                "–ß—Ç–æ –Ω—É–∂–Ω–æ?",
                                ParseMode.Markdown,
                                replyMarkup: keyboard.Markup);

                            await UserDB.ChangeUserAction(context, chatId, Actions.Profile);
                        }
                    }
                }
            }
            else
            {
                await client.SendTextMessageAsync(
                    chatId,
                    $"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥(",
                    ParseMode.Markdown);
            }
        }

        #region AdminModeAndAdminActions

        [UserAction(Actions.AdminMode)]
        public async Task AdminMode(ApplicationContext context, Message message, TelegramBotClient client)
        {
            if (message.Text == "–û–± –∏–≤–µ–Ω—Ç–µ")
            {
                EventDB eventDb = new EventDB();
                long chatId = message.Chat.Id;
                User user = await UserDB.GetUserByChatId(context, chatId);
                if (!user.IsAdminAuthorized)
                {
                    await client.SendTextMessageAsync(chatId, "–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –ø–æ–∫–∞");
                }
                else
                {
                    TelegramKeyboard keyboard = new TelegramKeyboard();
                    keyboard.AddRow("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞—Ç—å—é");
                    keyboard.AddRow("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å");
                    keyboard.AddRow("–ù–∞–∑–∞–¥");
                    await UserDB.ChangeUserAction(context, chatId, Actions.GetInformationAboutTheEvent);
                    string info = eventDb.GetInfoAboutTheEvent(chatId);
                    await client.SendTextMessageAsync(chatId, info, replyMarkup: keyboard.Markup);
                }
            }
            else if (message.Text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö")
            {
                TelegramKeyboard keyboard = new TelegramKeyboard();
                var chatId = message.Chat.Id;
                keyboard.AddRow("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
                keyboard.AddRow("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è");
                keyboard.AddRow("–°–∫–æ–ª—å–∫–æ –≤—Å—Ç—Ä–µ—á —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ");
                keyboard.AddRow("–°–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—à–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤");
                keyboard.AddRow("–°—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤");
                keyboard.AddRow("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–æ–≤");
                keyboard.AddRow("–ù–∞–∑–∞–¥");
                await UserDB.ChangeUserAction(context, chatId, Actions.InformationAboutUsers);
                await client.SendTextMessageAsync(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å –ø—É–Ω–∫—Ç",
                    replyMarkup: keyboard.Markup);
                // await client.SendTextMessageAsync(chatId, "–≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—á–µ–Ω—å —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã" + "üòÖ".ToString(), ParseMode.Markdown);
            }
            else if (message.Text == "–°–æ–∑–¥–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ")
            {
                //EventDB eventDB = new EventDB();
                long chatId = message.Chat.Id;
                TelegramKeyboard keyboard = new TelegramKeyboard();
                keyboard.AddRow("–ù–∞–∑–∞–¥");
                await UserDB.ChangeUserAction(context, chatId, Actions.CreateNotification);
                await client.SendTextMessageAsync(chatId,
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,–æ–Ω–æ –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
                    replyMarkup: keyboard.Markup);
            }
            else if (message.Text == "–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å")
            {
                long chatId = message.Chat.Id;
                TelegramKeyboard keyboard = new TelegramKeyboard();
                keyboard.AddRow("–ù–∞–∑–∞–¥");
                keyboard.AddRow("–û–ø—Ä–æ—Å —Å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é");
                keyboard.AddRow("–û–ø—Ä–æ—Å —Å –æ—Ü–µ–Ω–∫–æ–π");
                keyboard.AddRow("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–æ–≤");
                await UserDB.ChangeUserAction(context, chatId, Actions.CreateSurvey);
                await client.SendTextMessageAsync(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø—Ä–æ—Å–∞", replyMarkup: keyboard.Markup);
            }
            else if(message.Text=="–í–æ–π—Ç–∏ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫")
            {
                long chatId = message.Chat.Id;
               await UserDB.ChangeUserAction(context, chatId, Actions.None);
                TelegramKeyboard keyboard = new TelegramKeyboard();
                keyboard.AddRow("–í–æ–π—Ç–∏ –ø–æ –∏–≤–µ–Ω—Ç-–∫–æ–¥—É");
                keyboard.AddRow("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç");
                User user = context.Users.FirstOrDefault(N => N.TelegramId == chatId);
                user.IsAdminAuthorized = false;
                await client.SendTextMessageAsync(chatId, "–£ –≤–∞—Å –µ—Å—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç? –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –≤–æ–π–¥–∏—Ç–µ –ø–æ *–∏–≤–µ–Ω—Ç-–∫–æ–¥—É* \n P.S.*–ò–≤–µ–Ω—Ç-–∫–æ–¥* –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø–∏—Å—å–º–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", ParseMode.Markdown, replyMarkup: keyboard.Markup);
            }
                
        }

        [UserAction(Actions.GetInformationAboutTheEvent)]
        public async Task InformationAboutTheEvent(ApplicationContext context, Message message,
            TelegramBotClient client)
        {
            var chatId = message.Chat.Id;
            var text = message.Text;

            TelegramKeyboard backKeyboard = new TelegramKeyboard();
            backKeyboard.AddRow("–ù–∞–∑–∞–¥");

            if (text == "–ù–∞–∑–∞–¥")
            {
                TelegramKeyboard keyboard = new TelegramKeyboard();
                keyboard.AddRow("–û–± –∏–≤–µ–Ω—Ç–µ");
                keyboard.AddRow("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö");
                keyboard.AddRow("–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å");
                keyboard.AddRow("–°–æ–∑–¥–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ");
                keyboard.AddRow("–í–æ–π—Ç–∏ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫");
                await UserDB.ChangeUserAction(context, chatId, Actions.AdminMode);
                await client.SendTextMessageAsync(chatId, "–Ø –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", replyMarkup: keyboard.Markup);
            }
            else if (text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
            {
                await UserDB.ChangeUserAction(context, chatId, Actions.EditInformationAboutEvent);
                EventDB eventDb = new EventDB();
                string info = eventDb.GetInfoAboutTheEvent(chatId);

                // await client.SendTextMessageAsync(chatId, "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏", replyMarkup: backKeybaord.Markup);
            }
            else if (text == "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞—Ç—å—é")
            {
                await UserDB.ChangeUserAction(context, chatId, Actions.AddNewInformationAboutEvent);
                string[][] back = {new[] {"–ù–∞–∑–∞–¥"}};
                await client.SendTextMessageAsync(chatId, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ç–∞—Ç—å—é –æ–±—ã—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º",
                    replyMarkup: backKeyboard.Markup);
            }
            else
            {
                EventDB eventDb = new EventDB();
                eventDb.AddInformationAboutEvent(chatId, text);
                await client.SendTextMessageAsync(chatId, "–î–∞–Ω–Ω—ã–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã");
            }
        }

        [UserAction(Actions.AddNewInformationAboutEvent)] //"–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞—Ç—å—é"
        public async Task AddInfoAboutEvent(ApplicationContext context, Message message, TelegramBotClient client)
        {
            var chatId = message.Chat.Id;
            var text = message.Text;
            EventDB eventDb = new EventDB();

            TelegramKeyboard keyboard = new TelegramKeyboard();
            keyboard.AddRow("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞—Ç—å—é");
            keyboard.AddRow("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å");
            keyboard.AddRow("–ù–∞–∑–∞–¥");

            await UserDB.ChangeUserAction(context, chatId, Actions.GetInformationAboutTheEvent);
            if (message.Text == "–ù–∞–∑–∞–¥")
            {
                await client.SendTextMessageAsync(chatId, "–Ø –≤–µ—Ä–Ω—É–ª—Å—è –Ω–∞–∑–∞–¥", replyMarkup: keyboard.Markup);
            }
            else
            {
                eventDb.AddInformationAboutEvent(chatId, text);
                await client.SendTextMessageAsync(chatId, "–î–∞–Ω–Ω—ã–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã",
                    replyMarkup: keyboard.Markup);
            }
        }

        [UserAction(Actions.CreateNotification)] //—Å–æ–∑–¥–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ
        public async Task SendNotification(ApplicationContext context, Message message, TelegramBotClient client)
        {
            var chatId = message.Chat.Id;
            var text = message.Text;
            if (message.Text == "–ù–∞–∑–∞–¥")
            {
                TelegramKeyboard keyboard = new TelegramKeyboard();
                keyboard.AddRow("–û–± –∏–≤–µ–Ω—Ç–µ");
                keyboard.AddRow("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö");
                keyboard.AddRow("–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å");
                keyboard.AddRow("–°–æ–∑–¥–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ");
                keyboard.AddRow("–í–æ–π—Ç–∏ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫");
                await UserDB.ChangeUserAction(context, chatId, Actions.AdminMode);

                await client.SendTextMessageAsync(chatId, "–Ø –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", replyMarkup: keyboard.Markup);
            }
            else
            {
                EventDB eventDb = new EventDB();
                List<long> usersToSend = await eventDb.GetAllParticipantsOfEvent(chatId);
                foreach (var item in usersToSend)
                {
                    await client.SendTextMessageAsync(item, text,
                        ParseMode.Markdown); //–ø—Ä–æ–≤–µ—Ä–∏—Ç—å,—Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º?
                }

                await client.SendTextMessageAsync(chatId,
                    "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è");
            }
        }

        [UserAction(Actions.InformationAboutUsers)]
        public async Task GetInformationAboutUsers(ApplicationContext context, Message message,
            TelegramBotClient client)
        {
            var chatId = message.Chat.Id;
            EventDB eventDb = new EventDB();
            switch (message.Text)
            {
                case "–ù–∞–∑–∞–¥":
                {
                    TelegramKeyboard keyboard = new TelegramKeyboard();
                    keyboard.AddRow("–û–± –∏–≤–µ–Ω—Ç–µ");
                    keyboard.AddRow("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö");
                    keyboard.AddRow("–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å");
                    keyboard.AddRow("–°–æ–∑–¥–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ");
                    keyboard.AddRow("–í–æ–π—Ç–∏ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫");
                    await UserDB.ChangeUserAction(context, chatId, Actions.AdminMode);
                    await client.SendTextMessageAsync(chatId, "–Ø –≤–µ—Ä–Ω—É–ª—Å—è –Ω–∞–∑–∞–¥", replyMarkup: keyboard.Markup);
                }
                    break;
                case "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
                {
                    string amountOfUsers = await eventDb.GetInfrormationAboutUsers(chatId, message.Text);
                    await client.SendTextMessageAsync(chatId, amountOfUsers);
                }
                    break;
                case "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è":
                {
                    string amountOfActivationOfNetworkingMode =
                        await eventDb.GetInfrormationAboutUsers(chatId, message.Text);
                    await client.SendTextMessageAsync(chatId, amountOfActivationOfNetworkingMode);
                }
                    break;
                case "–°–∫–æ–ª—å–∫–æ –≤—Å—Ç—Ä–µ—á —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ":
                    {
                        string amountOfCompletedMeetings = await eventDb.GetInfrormationAboutUsers(chatId, message.Text);
                        await client.SendTextMessageAsync(chatId, amountOfCompletedMeetings);
                    }
                    break;
                case "–°–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—à–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤":
                    {
                        string amountOfRequestsOfContacts = await eventDb.GetInfrormationAboutUsers(chatId, message.Text);
                        await client.SendTextMessageAsync(chatId, amountOfRequestsOfContacts);
                    }
                    break;
                case "–°—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤":
                    {
                        string averageOfContacts = await eventDb.GetInfrormationAboutUsers(chatId, message.Text);
                        await client.SendTextMessageAsync(chatId, averageOfContacts);
                    }
                    break;
             /*   case "–ß–∏—Å–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤":
                {
                    string amountOfRequestsOfContacts = await eventDb.GetInfrormationAboutUsers(chatId, message.Text);
                    await client.SendTextMessageAsync(chatId, amountOfRequestsOfContacts);
                }
                    break;
                case "–ß–∏—Å–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤—Å—Ç—Ä–µ—á":
                {
                    string amountOfRequestsOfMeetings = await eventDb.GetInfrormationAboutUsers(chatId, message.Text);
                    await client.SendTextMessageAsync(chatId, amountOfRequestsOfMeetings);
                    break;
                }
/*
                case "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–æ–≤":
                {

                }
                    break;*/
            }
        }

        [UserAction(Actions.CreateSurvey)]
        public async Task CreatingSurvey(ApplicationContext context, Message message, TelegramBotClient client)
        {
            var chatId = message.Chat.Id;
            var text = message.Text;
            if (text == "–ù–∞–∑–∞–¥")
            {
                TelegramKeyboard keyboard = new TelegramKeyboard();
                keyboard.AddRow("–û–± –∏–≤–µ–Ω—Ç–µ");
                keyboard.AddRow("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö");
                keyboard.AddRow("–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å");
                keyboard.AddRow("–°–æ–∑–¥–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ");
                await UserDB.ChangeUserAction(context, chatId, Actions.AdminMode);
                await client.SendTextMessageAsync(chatId, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", replyMarkup: keyboard.Markup);
            }
            else if (text == "–û–ø—Ä–æ—Å —Å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é")
            {
                TelegramKeyboard keyboard = new TelegramKeyboard();
                keyboard.AddRow("–ù–∞–∑–∞–¥");
                
                await UserDB.ChangeUserAction(context, chatId, Actions.SurveyWithMessage);
                await client.SendTextMessageAsync(chatId, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å,–æ–Ω –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º", replyMarkup: keyboard.Markup);
            }
            else if (text == "–û–ø—Ä–æ—Å —Å –æ—Ü–µ–Ω–∫–æ–π")
            {
                TelegramKeyboard keyboard = new TelegramKeyboard();
                keyboard.AddRow("–ù–∞–∑–∞–¥");
               
                
                await client.SendTextMessageAsync(chatId, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å,–æ–Ω –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º", replyMarkup: keyboard.Markup);
                await UserDB.ChangeUserAction(context, chatId, Actions.SurveyWithMarks);
            }
            else if(text=="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–æ–≤")
            {

            }

        }

        [UserAction(Actions.SurveyWithMessage)]
        public async Task OnCreatingWithMessage(ApplicationContext context, Message message, TelegramBotClient client)
        {
            var chatId = message.Chat.Id;
            if (message.Text == "–ù–∞–∑–∞–¥")
            {
                TelegramKeyboard keyboard = new TelegramKeyboard();
                keyboard.AddRow("–ù–∞–∑–∞–¥");
                keyboard.AddRow("–û–ø—Ä–æ—Å —Å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é");
                keyboard.AddRow("–û–ø—Ä–æ—Å —Å –æ—Ü–µ–Ω–∫–æ–π");
                await UserDB.ChangeUserAction(context, chatId, Actions.CreateSurvey);
                await client.SendTextMessageAsync(chatId, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –æ–ø—Ä–æ—Å–∞",
                    replyMarkup: keyboard.Markup);
            }
            else
            {
                TelegramKeyboard keyboard = Utils.CommonKeyboards(Actions.AdminMode);
               await UserDB.ChangeUserAction(context, chatId, Actions.AdminMode);
                UserDB.AddSurvey(context, 0, message.Text, chatId);
                EventDB eventDb = new EventDB();
                List<long> allParticipants = await eventDb.GetAllParticipantsOfEvent(chatId);
                int QuestionId = UserDB.GetQuestionId(context, message.Text);
                TelegramInlineKeyboard inlineKeyboard = new TelegramInlineKeyboard();
                inlineKeyboard.AddTextRow("–û—Ç–≤–µ—Ç–∏—Ç—å").AddCallbackRow("999-" + QuestionId.ToString());
                foreach (var participant in allParticipants)
                {
                    await client.SendTextMessageAsync(participant, message.Text, replyMarkup: inlineKeyboard.Markup);
                }
                await client.SendTextMessageAsync(chatId, "–°–ø–∞—Å–∏–±–æ, –í–∞—à –≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ—Å–ª–∞–Ω —É—á–∞—Å—Ç–Ω–∏–∫–∞–º", replyMarkup: keyboard.Markup);
            }
        }

        [UserAction(Actions.SurveyWithMarks)]
        public async Task OnCreatingSurveyWithMarks(ApplicationContext context, Message message,
            TelegramBotClient client)
        {
            var chatId = message.Chat.Id;
            if (message.Text == "–ù–∞–∑–∞–¥")
            {
                TelegramKeyboard keyboard = new TelegramKeyboard();
                keyboard.AddRow("–ù–∞–∑–∞–¥");
                keyboard.AddRow("–û–ø—Ä–æ—Å —Å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é");
                keyboard.AddRow("–û–ø—Ä–æ—Å —Å –æ—Ü–µ–Ω–∫–æ–π");
                await UserDB.ChangeUserAction(context, chatId, Actions.CreateSurvey);
                await client.SendTextMessageAsync(chatId, "–Ø –≤–µ—Ä–Ω—É–ª—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –æ–ø—Ä–æ—Å–∞",
                    replyMarkup: keyboard.Markup);
            }
            else
            {
                TelegramKeyboard keyboard = Utils.CommonKeyboards(Actions.AdminMode);
                 UserDB.AddSurvey(context, 1, message.Text, chatId);
                EventDB eventDb = new EventDB();
                List<long> allParticipants =await eventDb.GetAllParticipantsOfEvent(chatId);
                int QuestionId = UserDB.GetQuestionId(context, message.Text);
                TelegramInlineKeyboard inlineKeyboard = new TelegramInlineKeyboard();
                inlineKeyboard
                    .AddTextRow("üî•".ToString(), "üëç".ToString(), "üëå".ToString(), "üëé".ToString(), "ü§¢".ToString())
                    .AddCallbackRow("990-" + "1-" + QuestionId.ToString(), "990-" + "2-" + QuestionId.ToString(),
                        "990-" + "3-" + QuestionId.ToString(), "990-" + "4-" + QuestionId.ToString(),
                        "990-" + "5-" + QuestionId.ToString());
                foreach (var participant in allParticipants)
                {
                    await client.SendTextMessageAsync(participant, message.Text, replyMarkup: inlineKeyboard.Markup);
                }
                await UserDB.ChangeUserAction(context, chatId, Actions.AdminMode);
                await client.SendTextMessageAsync(chatId, "–í–∞—à –≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –≤—Å–µ–º —Ä–∞–∑–æ—Å–ª–∞–Ω", replyMarkup: keyboard.Markup);
            }
        }

             
        [UserAction(Actions.AnswerToSurvey)]
        public async Task onAnsweringToSurvey(ApplicationContext context, Message message, TelegramBotClient client)
        {
            var chatId = message.Chat.Id;
            User user = context.Users.FirstOrDefault(n => n.TelegramId == chatId);
            if (message.Text == "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è")
            {
                Actions action = user.PreviousAction;
                TelegramKeyboard keyboard = new TelegramKeyboard();
                if (Utils.CommonKeyboards(action) != null)
                {
                    keyboard = Utils.CommonKeyboards(action);
                }

                user.PreviousAction = new Actions();
                await UserDB.ChangeUserAction(context, chatId, action);
                if (keyboard != null)
                {
                    await client.SendTextMessageAsync(chatId, "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É",
                        replyMarkup: keyboard.Markup);
                }
                else await client.SendTextMessageAsync(chatId, "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É");
            }
            else if (message.Text == "–ù–∞–ø–∏—Å–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç")
            {
                await client.SendTextMessageAsync(chatId, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,–æ–Ω–æ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–æ –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å");
            }
            else
            {
                Answer answer = new Answer();
                answer.AnswerMessage = message.Text;
                answer.QuestionId = user.CurrentQuestionId;
                answer.TelegramId = chatId;
                context.Answers.Add(answer);
                context.SaveChanges();
                TelegramKeyboard keyboard = new TelegramKeyboard(true);
                keyboard.AddRow("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è");
                keyboard.AddRow("–ù–∞–ø–∏—Å–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç");
                await client.SendTextMessageAsync(chatId, "–°–ø–∞—Å–∏–±–æ, –í–∞—à –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ",
                    replyMarkup: keyboard.Markup);
            }
        }

        #endregion

        [UserAction(Actions.WaitingForName)]
        public async Task OnWaitingForName(ApplicationContext context, Message message, TelegramBotClient client)
        {
            var chatId = message.Chat.Id;
            var text = message.Text;


            User user = await UserDB.GetUserByChatId(context, chatId);

            var names = text.Split(' ');
            if (names.Length == 2)
            {
                if (user.FirstName == null && user.LastName == null)
                {
                    user.FirstName = names[0].Correct();
                    user.LastName = names[1].Correct();
                    context.Update(user);
                    context.SaveChanges();
                    StringBuilder builder = new StringBuilder();

                    if (string.IsNullOrEmpty(user.Email))
                    {
                        builder.AppendLine(@"–í–æ—Ç –º—ã –∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å‚úåÔ∏è");
                        builder.AppendLine("–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å *—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã*");
                        builder.AppendLine();
                        builder.AppendLine(
                            "ü§ñ –û–Ω –Ω—É–∂–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞—à–µ–≥–æ *–ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞*, –æ–Ω —É–ø—Ä–æ—Å—Ç–∏—Ç –≤—Ö–æ–¥ –≤ —Å–ª—É—á–∞–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞, –∞ —Ç–∞–∫–∂–µ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
                        await client.SendTextMessageAsync(
                            chatId,
                            builder.ToString(),
                            ParseMode.Markdown);
                        await UserDB.ChangeUserAction(context, chatId, Actions.WainingForEmail);
                    }
                }
                else
                {
                    user.FirstName = names[0].Correct();
                    user.LastName = names[1].Correct();
                    context.Update(user);
                    context.SaveChanges();

                    await client.SendTextMessageAsync(chatId, "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã");

                    TelegramKeyboard keyboard = new TelegramKeyboard();

                    keyboard.AddRow("–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è");
                    keyboard.AddRow("–ü–æ—á—Ç–∞");
                    keyboard.AddRow("–†–∞–±–æ—Ç–∞ –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å");
                    keyboard.AddRow("–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å");
                    keyboard.AddRow("–û —á–µ–º –ø–æ–æ–±—â–∞—Ç—å—Å—è");
                    keyboard.AddRow("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å");

                    await client.SendTextMessageAsync(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                        replyMarkup: keyboard.Markup);
                    await UserDB.ChangeUserAction(context, chatId, Actions.MyProfileEditing);
                }
            }
            else
            {
                await client.SendTextMessageAsync(
                    chatId,
                    "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é",
                    ParseMode.Markdown);
            }
        }


        [UserAction(Actions.WainingForEmail)]
        public async Task OnWaitingForEmail(ApplicationContext context, Message message, TelegramBotClient client)
        {
            var chatId = message.Chat.Id;
            var text = message.Text;


            User user = await UserDB.GetUserByChatId(context, chatId);
            TelegramKeyboard keyboard;
            if (Utils.IsEmailValid(text))
            {
                if (await UserDB.CheckEmailInDB(context, text) && text != user.Email)
                {
                    await UserDB.ChangeUserAction(context, chatId, Actions.WaitingForValidationCode);

                    await client.SendTextMessageAsync(
                        chatId,
                        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —ç—Ç–æ–π –ø–æ—á—Ç–æ–π —Ä–∞–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –¥—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç —Ç–µ–ª–µ–≥—Ä–∞–º. –ù–∞ —ç—Ç—É –ø–æ—á—Ç—É –æ—Ç–ø–∞—Ä–≤–ª–µ–Ω –∫–æ–¥ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥",
                        ParseMode.Markdown);

                    string code = Utils.GenerateRandomCode();
                    await Utils.SendEmailAsync(text, "–ü–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ—á—Ç—ã", $"–í–∞—à –∫–æ–¥–∞ –¥–ª—è –ø–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ—á—Ç—ã: {code}");
                    context.Validations.Add(new UserValidation
                    {
                        UserTelegramId = chatId,
                        Code = code,
                        Email = text
                    });
                    context.SaveChanges();
                }
                else
                {
                    if (user.Email == null)
                    {
                        user.Email = text.Correct();
                        context.Update(user);
                        context.SaveChanges();
                        if (user.IsAdminAuthorized)
                        {
                            await UserDB.ChangeUserAction(context, chatId, Actions.AdminMode);
                            keyboard = new TelegramKeyboard();
                            keyboard.AddRow("–û–± –∏–≤–µ–Ω—Ç–µ");
                            keyboard.AddRow("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö");
                            keyboard.AddRow("–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å");
                            keyboard.AddRow("–°–æ–∑–¥–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ");
                            keyboard.AddRow("–í–æ–π—Ç–∏ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫");
                            StringBuilder builder = new StringBuilder();
                            int evId = user.CurrentEventId;
                            Event eventt = context.Events.FirstOrDefault(n => n.EventId == evId);
                            builder.AppendLine($"–í–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ \"{eventt.Name}\"");
                            await client.SendTextMessageAsync(chatId, builder.ToString(), replyMarkup: keyboard.Markup);
                        }
                        else
                        {
                            keyboard = new TelegramKeyboard();
                            keyboard.AddRow("–û –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏", "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é");
                            keyboard.AddRow("–†–µ–∂–∏–º –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–∞");
                            keyboard.AddRow("–ó–∞–ø–∏—Å–Ω–∞—è –∫–Ω–∏–∂–∫–∞");
                            keyboard.AddRow("–í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è");

                            await client.SendTextMessageAsync(
                                chatId,
                                "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –≤–µ—Å—å –º–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª",
                                ParseMode.Markdown,
                                replyMarkup: keyboard.Markup);
                            await UserDB.ChangeUserAction(context, chatId, Actions.Profile);
                        }
                    }
                    else
                    {
                        user.Email = text.Correct();
                        context.Update(user);
                        context.SaveChanges();


                        keyboard = new TelegramKeyboard();

                        await client.SendTextMessageAsync(chatId, "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã");
                        keyboard.AddRow("–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è");
                        keyboard.AddRow("–ü–æ—á—Ç–∞");
                        keyboard.AddRow("–†–∞–±–æ—Ç–∞ –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å");
                        keyboard.AddRow("–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å");
                        keyboard.AddRow("–û —á–µ–º –ø–æ–æ–±—â–∞—Ç—å—Å—è");
                        keyboard.AddRow("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å");

                        await client.SendTextMessageAsync(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                            replyMarkup: keyboard.Markup);
                        await UserDB.ChangeUserAction(context, chatId, Actions.MyProfileEditing);
                    }
                }
            }
            else
            {
                await client.SendTextMessageAsync(
                    chatId,
                    "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—á—Ç—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
                    ParseMode.Markdown);
            }
        }

        [UserAction(Actions.WaitingForValidationCode)]
        public async Task OnWaitingForValidationCode(ApplicationContext context, Message message,
            TelegramBotClient client)
        {
            var text = message.Text;
            var chatId = message.Chat.Id;


            User user = await UserDB.GetUserByChatId(context, chatId);
            UserValidation val = context.Validations.FirstOrDefault(v => v.UserTelegramId == chatId);
            if (val != null)
            {
                if (val.Code == text)
                {
                    User old = context.Users.FirstOrDefault(u => u.Email == val.Email);
                    if (old != null)
                    {
                        context.Users.Remove(old);
                        context.Validations.Remove(val);
                    }

                    user.Email = val.Email;
                    context.Users.Update(user);
                    context.SaveChanges();

                    await client.SendTextMessageAsync(
                        chatId,
                        "–ü–æ—á—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞",
                        ParseMode.Markdown);


                    TelegramKeyboard keyboard = new TelegramKeyboard();
                    keyboard.AddRow("–û –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏", "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é");
                    keyboard.AddRow("–†–µ–∂–∏–º –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–∞");
                    keyboard.AddRow("–ó–∞–ø–∏—Å–Ω–∞—è –∫–Ω–∏–∂–∫–∞");
                    keyboard.AddRow("–í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è");
                    await client.SendTextMessageAsync(
                        chatId,
                        "–ß—Ç–æ –Ω—É–∂–Ω–æ?",
                        ParseMode.Markdown,
                        replyMarkup: keyboard.Markup);

                    await UserDB.ChangeUserAction(context, chatId, Actions.Profile);
                }
                else
                {
                    await client.SendTextMessageAsync(
                        chatId,
                        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥",
                        ParseMode.Markdown);
                }
            }
        }


        [UserAction(Actions.DeleteOrNot)]
        public async Task OnDeleteOrNot(ApplicationContext context, Message message, TelegramBotClient client)
        {
            var chatId = message.Chat.Id;
            var text = message.Text;


            User user = await UserDB.GetUserByChatId(context, chatId);

            if (text == "–î–∞")
            {
                await UserDB.UserLogoff(context, chatId);
                await UserDB.ResetAction(context, chatId);
                await client.SendTextMessageAsync(
                    chatId,
                    "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è evectbot, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –Ω–∞–ø–∏—à–∏—Ç–µ _/start_",
                    ParseMode.Markdown);
            }
            else if (text == "–ù–µ—Ç")
            {
                context.Users.Remove(user);
                context.SaveChanges();
                await client.SendTextMessageAsync(
                    chatId,
                    "–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –Ω–∞–ø–∏—à–∏—Ç–µ _/start_",
                    ParseMode.Markdown);
            }
            else
            {
                await client.SendTextMessageAsync(
                    chatId,
                    "–î–∞/–ù–µ—Ç",
                    ParseMode.Markdown);
            }
        }


        [UserAction(Actions.Profile)]
        public async Task OnProfile(ApplicationContext context, Message message, TelegramBotClient client)
        {
            EventDB eventDb = new EventDB();
            var chatId = message.Chat.Id;
            var text = message.Text;

            User user = await UserDB.GetUserByChatId(context, chatId);
            StringBuilder builder = new StringBuilder();

            TelegramKeyboard keyboard;
            switch (text)
            {
                case "–û –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏":
                    bool isReg = user.CurrentEventId > 0;
                    if (isReg)
                    {
                        Event ev = context.Events.Find(user.CurrentEventId);
                        string linkType = ev.TelegraphLink.Contains("telegra.ph") ? "Telegraph" : "Teletype";
                        builder.Clear();

                        builder.AppendLine($"*–ù–∞–∑–≤–∞–Ω–∏–µ: *{ev.Name}");
                        builder.AppendLine(
                            $"–î–ª—è –≤–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞ –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ —Å—Ç–∞—Ç—å—é –≤ {linkType}: {ev.TelegraphLink}");

                        await client.SendTextMessageAsync(
                            chatId,
                            builder.ToString(),
                            ParseMode.Markdown);
                        keyboard = new TelegramKeyboard();
                        keyboard.AddRow("–û –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏", "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é");
                        keyboard.AddRow("–†–µ–∂–∏–º –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–∞");
                        keyboard.AddRow("–ó–∞–ø–∏—Å–Ω–∞—è –∫–Ω–∏–∂–∫–∞");
                        keyboard.AddRow("–í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è");
                        await client.SendTextMessageAsync(chatId, "–ß—Ç–æ –Ω—É–∂–Ω–æ?", ParseMode.Markdown,
                            replyMarkup: keyboard.Markup);
                    }
                    else
                    {
                        await client.SendTextMessageAsync(
                            chatId,
                            $"–í—ã –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –Ω–∏ –∫ –æ–¥–Ω–æ–º—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é",
                            ParseMode.Markdown);
                    }

                    break;

                case "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é":
                    await client.SendTextMessageAsync(
                        chatId,
                        "–í–µ–µ–¥–∏—Ç–µ –∏–≤–µ–Ω—Ç –∫–æ–¥",
                        ParseMode.Markdown);
                    await UserDB.ChangeUserAction(context, chatId, Actions.WaitingForEventCode);
                    break;


                case "–í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":


                    var events = Utils.SplitList(2, (await eventDb.GetUserEvents(chatId)).Select(e => e.Name).ToList());


                    List<string> temp = events[0];
                    temp[0] = $"{temp[0]} {Utils.GetCheckmark()}";

                    var forKeyboard = Utils.SplitList(1, temp);

                    string cont = events.Count > 1 ? "2" : "|";

                    forKeyboard.Add(new List<string> {"|", "X", $"{cont}"});

                    keyboard = new TelegramKeyboard();

                    foreach (var list in forKeyboard)
                    {
                        keyboard.AddRow(list);
                    }


                    await client.SendTextMessageAsync(
                        chatId,
                        "–í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
                        ParseMode.Markdown,
                        replyMarkup: keyboard.Markup);

                    await UserDB.ChangeUserAction(context, chatId, Actions.AllEventsChangePage);

                    break;

                case "–†–µ–∂–∏–º –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–∞":

                    if (user.CompanyAndPosition == null) // TODO: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                    {
                        //–û–¢ –õ–ò–ó–´
                        eventDb.AddInfoAboutUsers(chatId, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π —Ä–µ–∂–∏–º–∞ –æ–±—â–µ–Ω–∏—è");
                        await UserDB.ChangeUserAction(context, chatId, Actions.FirstQuestion);
                        //–ö–û–ù–ï–¶ –û–¢ –õ–ò–ó–´

                        // Phrase shows user that mode has changed
                        await client.SendTextMessageAsync(
                            chatId,
                            "*–ì–¥–µ –∏ –∫–µ–º –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ? [1/3]*\n\n–î–ª—è *—Ä–µ–∂–∏–º–∞ –æ–±—â–µ–Ω–∏—è* –∂–∏–∑–Ω–µ–Ω–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è ‚Äì *3 –≤–æ–ø—Ä–æ—Å–∞ –∏ 2 —ç—Ç–∞–ø–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–æ–≤* (—Ç–µ–≥ ‚Äì —Å—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞, —É–ø—Ä–æ—â–∞–µ—Ç –ø–æ–∏—Å–∫ –Ω—É–∂–Ω—ã—Ö –≤–∞–º –ª—é–¥–µ–π).\n\n–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º üôÉ",
                            ParseMode.Markdown);
                        // First question
                        await client.SendTextMessageAsync(
                            chatId,
                            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ª—é–¥—è–º –ø–æ–Ω—è—Ç—å, —á–µ–º –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –∏–º –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω. –ü—Ä–∏—à–ª–∏ –º–Ω–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ —Ç–≤–æ—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å. __–ù–∞–ø—Ä–∏–º–µ—Ä__, \"–î–∏–∑–∞–π–Ω–µ—Ä –≤ –Ø–Ω–¥–µ–∫—Å\"",
                            ParseMode.Markdown);
                    }
                    else
                    {
                        keyboard = new TelegramKeyboard();

                        keyboard.AddRow("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å");
                        keyboard.AddRow("–ó–∞–ø–∏—Å–Ω–∞—è –∫–Ω–∏–∂–∫–∞");
                        keyboard.AddRow("–û–±—â–µ–Ω–∏–µ");
                        keyboard.AddRow("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é");

                        await UserDB.ChangeUserAction(context, chatId, Actions.NetworkingMenu);
                        await client.SendTextMessageAsync(chatId, "–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–∞",
                            replyMarkup: keyboard.Markup);
                    }

                    break;

                case "–ó–∞–ø–∏—Å–Ω–∞—è –∫–Ω–∏–∂–∫–∞":
                    List<ContactsBook> contacts = user.Contacts.Take(4).ToList();
                    List<string> nums = new List<string>(4);
                    List<string> ids = new List<string>(4);


                    var tags = user.SearchingUserTags.Select(u =>
                        context.SearchingTags.FirstOrDefault(t => t.SearchingTagId == u.TagId)?.Name).ToList();

                    builder.AppendLine("_–í–∞—à–∏ —Ç–µ–≥–∏_");
                    builder.AppendLine($"`{string.Join(", ", tags)}`");
                    builder.AppendLine();
                    builder.AppendLine("*–í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã*");
                    builder.AppendLine();
                    int i = 1;

                    foreach (var contactsBook in contacts)
                    {
                        nums.Add(i.ToString());
                        ids.Add($"prof-{contactsBook.AnotherUserId}");
                        User another = await UserDB.GetUserByChatId(context, contactsBook.AnotherUserId);
                        builder.AppendLine(
                            $"*{i})*{another.FirstName} {another.LastName} {another.CompanyAndPosition}");
                        builder.AppendLine($"_–ß–µ–º –ø–æ–ª–µ–∑–µ–Ω_: {another.Utility}");
                        builder.AppendLine($"_–ö–æ–Ω—Ç–∞–∫—Ç_: @{another.TelegramUserName}");
                        builder.AppendLine();
                        i++;
                    }

                    TelegramInlineKeyboard inline = new TelegramInlineKeyboard();
                    if (user.Contacts.Count > 4)
                    {
                        inline
                            .AddTextRow("–í–ø–µ—Ä–µ–¥")
                            .AddCallbackRow("profpage-2");
                    }

                    inline
                        .AddTextRow(nums.ToArray())
                        .AddCallbackRow(ids.ToArray());

                    await client.SendTextMessageAsync(chatId, builder.ToString(), ParseMode.Markdown,
                        replyMarkup: inline.Markup);
                    break;

                default:
                    await client.SendTextMessageAsync(
                        chatId,
                        "—á–æ—Ç –Ω–µ —Ç–æ",
                        ParseMode.Markdown);
                    break;
            }
        }

        [UserAction(Actions.AllEventsChangePage)]
        public async Task OnEventsChangePage(ApplicationContext context, Message message, TelegramBotClient client)
        {
            EventDB eventDb = new EventDB();

            var text = message.Text;
            var chatId = message.Chat.Id;
            var events = Utils.SplitList(2, (await eventDb.GetUserEvents(chatId)).Select(e => e.Name).ToList());

            User user = await UserDB.GetUserByChatId(context, chatId);

            TelegramKeyboard keyboard;

            if (text == "X")
            {
                keyboard = new TelegramKeyboard();
                keyboard.AddRow("–û –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏", "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é");
                keyboard.AddRow("–†–µ–∂–∏–º –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–∞");
                keyboard.AddRow("–ó–∞–ø–∏—Å–Ω–∞—è –∫–Ω–∏–∂–∫–∞");
                keyboard.AddRow("–í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è");
                await client.SendTextMessageAsync(chatId, "–ß—Ç–æ –Ω—É–∂–Ω–æ?", ParseMode.Markdown,
                    replyMarkup: keyboard.Markup);
                await UserDB.ChangeUserAction(context, chatId, Actions.Profile);
            }

            if (int.TryParse(text, out int n))
            {
                int page = Convert.ToInt32(text);

                if (page <= events.Count && page > 0)
                {
                    for (var i = 0; i < events[page - 1].Count; i++)
                    {
                        string t = events[page - 1][i];
                        if (eventDb.Context.Events.Find(user.CurrentEventId).Name == t)
                        {
                            events[page - 1][i] = $"{t} {Utils.GetCheckmark()}";
                            break;
                        }
                    }


                    string left = page - 1 > 0 ? $"{page - 1}" : "|";
                    string right = page + 1 < events.Count ? $"{page + 1}" : "|";


                    var forKeyboard = Utils.SplitList(1, events[page - 1]);

                    forKeyboard.Add(new List<string> {left, "X", right});


                    keyboard = new TelegramKeyboard();

                    foreach (var list in forKeyboard)
                    {
                        keyboard.AddRow(list);
                    }

                    await client.SendTextMessageAsync(
                        chatId,
                        "–í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
                        ParseMode.Markdown,
                        replyMarkup: keyboard.Markup);
                }
            }
            else
            {
                if (text.Contains(Utils.GetCheckmark()))
                {
                    text = text.Substring(0, text.Length - 2);
                }


                var evs = await eventDb.GetUserEvents(chatId);
                foreach (var ev in evs)
                {
                    if (ev.Name == text)
                    {
                        if (ev.EventId == user.CurrentEventId)
                        {
                            await client.SendTextMessageAsync(chatId, "–í—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —ç—Ç–æ–º—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é");
                            break;
                        }

                        await client.SendTextMessageAsync(chatId, $"–í—ã –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏ —Ç–µ–∫—É—â–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞ *{ev.Name}*",
                            ParseMode.Markdown);
                        user.CurrentEventId = ev.EventId;
                        break;
                    }
                }

                context.Update(user);
                context.SaveChanges();
                keyboard = new TelegramKeyboard();
                keyboard.AddRow("–û –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏", "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é");
                keyboard.AddRow("–†–µ–∂–∏–º –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–∞");
                keyboard.AddRow("–ó–∞–ø–∏—Å–Ω–∞—è –∫–Ω–∏–∂–∫–∞");
                keyboard.AddRow("–í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è");
                await client.SendTextMessageAsync(chatId, "–ß—Ç–æ –Ω—É–∂–Ω–æ?", ParseMode.Markdown,
                    replyMarkup: keyboard.Markup);
                await UserDB.ChangeUserAction(context, chatId, Actions.Profile);
            }
        }


        #region Network mode

        [UserAction(Actions.FirstQuestion)]
        public async Task OnFirstQuestion(ApplicationContext context, Message message, TelegramBotClient client)
        {
            var chatId = message.Chat.Id;
            var text = message.Text;


            User user = await UserDB.GetUserByChatId(context, chatId);

            if (user.CompanyAndPosition == null)
            {
                user.CompanyAndPosition = text.Correct();

                await UserDB.ChangeUserAction(context, chatId, Actions.SecondQuestion);
                await client.SendTextMessageAsync(
                    chatId, "–¢–µ–ø–µ—Ä—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ãüòú \n*–ß–µ–º –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã? [2/3]*", ParseMode.Markdown);
            }
            else
            {
                user.CompanyAndPosition = text.Correct();

                context.Update(user);
                context.SaveChanges();

                await client.SendTextMessageAsync(chatId, "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã");

                TelegramKeyboard keyboard = new TelegramKeyboard();
                keyboard.AddRow("–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è");
                keyboard.AddRow("–ü–æ—á—Ç–∞");
                keyboard.AddRow("–†–∞–±–æ—Ç–∞ –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å");
                keyboard.AddRow("–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å");
                keyboard.AddRow("–û —á–µ–º –ø–æ–æ–±—â–∞—Ç—å—Å—è");
                keyboard.AddRow("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å");

                await client.SendTextMessageAsync(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                    replyMarkup: keyboard.Markup);
                await UserDB.ChangeUserAction(context, chatId, Actions.MyProfileEditing);
            }
        }

        [UserAction(Actions.SecondQuestion)]
        public async Task OnSecondQuestion(ApplicationContext context, Message message, TelegramBotClient client)
        {
            var chatId = message.Chat.Id;
            var text = message.Text;


            User user = await UserDB.GetUserByChatId(context, chatId);

            if (user.Utility == null)
            {
                user.Utility = text.Correct();
                await UserDB.ChangeUserAction(context, chatId, Actions.ThirdQuestion);
                await client.SendTextMessageAsync(
                    chatId,
                    "–ë–æ–ª–µ–µ –æ—Ç–≤–ª–µ—á—ë–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Åü§ó\n*–û —á–µ–º –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–æ–±—â–∞—Ç—å—Å—è? [3/3]*\n–¢–µ–º—ã —Ä–∞–±–æ—á–∏–µ –∏ –Ω–µ –æ—á–µ–Ω—å",
                    ParseMode.Markdown);
            }
            else
            {
                user.Utility = text.Correct();
                context.Update(user);
                context.SaveChanges();

                TelegramKeyboard keyboard = new TelegramKeyboard();
                keyboard.AddRow("–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è");
                keyboard.AddRow("–ü–æ—á—Ç–∞");
                keyboard.AddRow("–†–∞–±–æ—Ç–∞ –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å");
                keyboard.AddRow("–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å");
                keyboard.AddRow("–û —á–µ–º –ø–æ–æ–±—â–∞—Ç—å—Å—è");
                keyboard.AddRow("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å");

                await client.SendTextMessageAsync(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                    replyMarkup: keyboard.Markup);
                await UserDB.ChangeUserAction(context, chatId, Actions.MyProfileEditing);
            }
        }

        [UserAction(Actions.ThirdQuestion)]
        public async Task OnThirdQuestion(ApplicationContext context, Message message, TelegramBotClient client)
        {
            var chatId = message.Chat.Id;
            var text = message.Text;

            User user = await UserDB.GetUserByChatId(context, chatId);

            TelegramKeyboard keyboard = new TelegramKeyboard(true);

            if (user.Communication == null)
            {
                user.Communication = text.Correct();
                List<Tag> parentTags = context.Tags.Where(x => x.Level == 1).ToList();

                foreach (var parentTag in parentTags)
                {
                    keyboard.AddRow(parentTag.Name);
                }

                await client.SendTextMessageAsync(
                    chatId, "üòã –•–æ—Ä–æ—à–æ, –ø–µ—Ä–µ–π–¥—ë–º –∫ *—Ç–µ–≥–∞–º*." +
                            "\n\n–ü–æ —Ç–µ–≥–∞–º –º–æ–∂–Ω–æ –ª–µ–≥–∫–æ –∏ —É–¥–æ–±–Ω–æ __—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å__ –Ω—É–∂–Ω—ã—Ö –≤–∞–º –ª—é–¥–µ–π. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–∏—Ä–∞—é—Ç—Å—è –≥—Ä—É–ø–ø—ã —Ç–µ–≥–æ–≤, –Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ *–¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥* –º–æ–∂–Ω–æ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å—Å—è –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–æ–π" +
                            "\n\n–í—ã –º–æ–∂–µ—Ç–µ –∏—Ö –º–µ–Ω—è—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å" +
                            "\n\n–ê —Å–µ–π—á–∞—Å –≤—ã–±–µ—Ä–∏—Ç–µ –í–ê–®–ò —Ç–µ–≥–∏ (–ø–æ–¥—Ö–æ–¥—è—Ç –ª–∏—á–Ω–æ *–í–ê–ú*) *[1/2]*",
                    ParseMode.Markdown, replyMarkup: keyboard.Markup);

                await UserDB.ChangeUserAction(context, chatId, Actions.AddingParentTag);
            }
            else
            {
                user.Communication = text.Correct();

                context.Update(user);
                context.SaveChanges();

                keyboard.AddRow("–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è");
                keyboard.AddRow("–ü–æ—á—Ç–∞");
                keyboard.AddRow("–†–∞–±–æ—Ç–∞ –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å");
                keyboard.AddRow("–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å");
                keyboard.AddRow("–û —á–µ–º –ø–æ–æ–±—â–∞—Ç—å—Å—è");
                keyboard.AddRow("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å");

                await client.SendTextMessageAsync(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                    replyMarkup: keyboard.Markup);
                await UserDB.ChangeUserAction(context, chatId, Actions.MyProfileEditing);
            }
        }

        #region Editing user

        [UserAction(Actions.AddingParentTag)]
        public async Task OnAddingTags(ApplicationContext context, Message message, TelegramBotClient client)
        {
            // Add one tag and than more tags (next Action.ChoosingTags)
            var chatId = message.Chat.Id;
            var text = message.Text;

            User user = await UserDB.GetUserByChatId(context, chatId);
            Tag parentTag = context.Tags.FirstOrDefault(x => x.Name == text);

            TelegramKeyboard keyboard = new TelegramKeyboard(true);
            TelegramInlineKeyboard inlineKeyboard = new TelegramInlineKeyboard();

            // Listing tags of this parent tag to user
            List<Tag> childTags = context.Tags.Where(x => x.Level == 2 && x.ParentTagID == parentTag.TagId).ToList();
            bool ex;
            string ch;
            foreach (var tag in childTags)
            {
                ex = user.UserTags.FirstOrDefault(e => e.TagId == tag.TagId) != null;
                if (ex)
                {
                    ch = Utils.GetCheckmark();
                }
                else
                {
                    ch = "";
                }

                inlineKeyboard.AddTextRow($"{tag.Name} {ch}").AddCallbackRow($"tag-{tag.TagId}");
            }

            keyboard.AddRow("–û–∫"); // Variants of actions
            keyboard.AddRow("–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥");
            keyboard.AddRow("–í—ã–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ");


            await client.SendTextMessageAsync(
                chatId, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏:", ParseMode.Markdown, // Editing while choosing tags?
                replyMarkup: inlineKeyboard.Markup);

            await client.SendTextMessageAsync(
                chatId, "?", ParseMode.Markdown,
                replyMarkup: keyboard.Markup);

            await UserDB.ChangeUserAction(context, chatId, Actions.ChoosingTags);
        }

        [UserAction(Actions.ChoosingTags)]
        public async Task OnChoosingTags(ApplicationContext context, Message message, TelegramBotClient client)
        {
            var chatId = message.Chat.Id;
            var text = message.Text;

            User user = await UserDB.GetUserByChatId(context, chatId);

            TelegramKeyboard keyboard = new TelegramKeyboard(true);

            List<UserTag> userTags = user.UserTags;
            List<Tag> parentTags = context.Tags.Where(x => x.Level == 1).ToList();
            string chosenTags = "";
            int i = 0;

            // Gets users callbacks from inline keyboard and receiving answers from normal keyboard
            switch (text)
            {
                case "–û–∫": // Shows all Networking buttons 
                    if (userTags != null && userTags.Count > 0)
                    {
                        foreach (var userTag in userTags)
                        {
                            chosenTags += userTag.Tag.Name + ", ";
                        }

                        foreach (var parentTag in parentTags)
                        {
                            keyboard.AddRow(parentTag.Name);
                        }

                        await client.SendTextMessageAsync(
                            chatId, "–í–∞—à–∏ —Ç–µ–≥–∏:\n" + chosenTags,
                            ParseMode.Markdown);

                        if (user.SearchingUserTags.Count == 0)
                        {
                            await client.SendTextMessageAsync(
                                chatId,
                                "üòé –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥\n\n–í—ã–±–µ—Ä–∏—Ç–µ *—Ç–µ–≥–∏* –Ω—É–∂–Ω—ã—Ö –í–ê–ú –ª—é–¥–µ–π (*–í–´* –∏—Ö –∏—â–µ—Ç–µ) ‚Äì _—Ç–µ–≥–∏ –ø–æ–∏—Å–∫–∞_",
                                ParseMode.Markdown, replyMarkup: keyboard.Markup);

                            await UserDB.ChangeUserAction(context, chatId, Actions.SearchingParentTag);
                        }
                        else
                        {
                            keyboard = new TelegramKeyboard();
                            keyboard.AddRow("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å");
                            keyboard.AddRow("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏");
                            keyboard.AddRow("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è");
                            await client.SendTextMessageAsync(chatId, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å",
                                replyMarkup: keyboard.Markup);
                        }
                    }
                    else
                    {
                        await client.SendTextMessageAsync(
                            chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏!", ParseMode.Markdown);
                    }

                    break;

                case "–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥": // Add new parent tag


                    foreach (var parentTag in parentTags)
                    {
                        keyboard.AddRow(parentTag.Name);
                    }


                    await client.SendTextMessageAsync(
                        chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤–Ω—ã–π —Ç–µ–≥:",
                        ParseMode.Markdown, replyMarkup: keyboard.Markup);

                    await UserDB.ChangeUserAction(context, chatId, Actions.AddingParentTag);

                    break;

                case "–í—ã–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ": // Returns to Action with Parent Tags? Deletes all tags that user has now

                    context.UserTags.RemoveRange(userTags); // Delete ALL previous tags
                    context.SaveChanges();

                    foreach (var parentTag in parentTags)
                    {
                        keyboard.AddRow(parentTag.Name);
                    }

                    await client.SendTextMessageAsync(
                        chatId, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥:",
                        ParseMode.Markdown, replyMarkup: keyboard.Markup);

                    await UserDB.ChangeUserAction(context, chatId, Actions.AddingParentTag);

                    break;
            }
        }

        #endregion

        // ================================= Editing Search Parametrs ================================================

        [UserAction(Actions.SearchingParentTag)]
        public async Task OnSearchingParentTag(ApplicationContext context, Message message, TelegramBotClient client)
        {
            var chatId = message.Chat.Id;
            var text = message.Text;

            User user = await UserDB.GetUserByChatId(context, chatId);
            Tag parentTag = context.Tags.FirstOrDefault(x => x.Name == text);


            TelegramKeyboard keyboard = new TelegramKeyboard(true);
            TelegramInlineKeyboard inlineKeyboard = new TelegramInlineKeyboard();

            // Listing tags of this parent tag to user
            List<SearchingTag> childTags = context.SearchingTags
                .Where(x => x.Level == 2 && x.ParentTagID == parentTag.TagId).ToList();

            bool ex;
            string ch;
            foreach (var tag in childTags)
            {
                ex = user.SearchingUserTags.FirstOrDefault(e => e.TagId == tag.SearchingTagId) != null;
                if (ex)
                {
                    ch = Utils.GetCheckmark();
                }
                else
                {
                    ch = "";
                }

                inlineKeyboard.AddTextRow($"{tag.Name} {ch}").AddCallbackRow($"searchtag-{tag.SearchingTagId}");
            }


            keyboard.AddRow("–û–∫"); // Variants of actions
            keyboard.AddRow("–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥");
            keyboard.AddRow("–í—ã–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ");

            await client.SendTextMessageAsync(
                chatId, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏:", ParseMode.Markdown, // Editing while choosing tags?
                replyMarkup: inlineKeyboard.Markup);

            await client.SendTextMessageAsync(
                chatId, "?", ParseMode.Markdown,
                replyMarkup: keyboard.Markup);

            await UserDB.ChangeUserAction(context, chatId, Actions.SearchingTags);
        }

        [UserAction(Actions.SearchingTags)]
        public async Task OnSearchingTags(ApplicationContext context, Message message, TelegramBotClient client)
        {
            var chatId = message.Chat.Id;
            var text = message.Text;

            User user = await UserDB.GetUserByChatId(context, chatId);

            TelegramKeyboard keyboard = new TelegramKeyboard(true);

            List<UserSearchingTag> userTags = user.SearchingUserTags.ToList();
            List<Tag> parentTags = context.Tags.Where(x => x.Level == 1).ToList();
            string chosenTags = "";
            int i = 0;

            // Gets users callbacks from inline keyboard and receiving answers from normal keyboard
            switch (text)
            {
                case "–û–∫": // Shows all Networking buttons 
                    if (userTags.Count > 0)
                    {
                        keyboard.AddRow("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å");
                        keyboard.AddRow("–ó–∞–ø–∏—Å–Ω–∞—è –∫–Ω–∏–∂–∫–∞");
                        keyboard.AddRow("–û–±—â–µ–Ω–∏–µ");
                        keyboard.AddRow("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é");

                        await client.SendTextMessageAsync(
                            chatId, "–¢–µ–≥–∏ –Ω—É–∂–Ω—ã—Ö –ª—é–¥–µ–π:\n" + string.Join(", ", userTags),
                            ParseMode.Markdown);

                        await client.SendTextMessageAsync(
                            chatId, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é ü•≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∂–∏–º–∞ –æ–±—â–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!" +
                                    "\n\nüìù –í *–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å* –≤—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ –∏ –∏–∑–º–µ–Ω—è—Ç—å —Ç–µ–≥–∏" +
                                    "\n\nüìí –í *–ó–∞–ø–∏—Å–Ω–æ–π –∫–Ω–∏–∂–∫–µ* —Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã" +
                                    "\n\n‚òïÔ∏è *–û–±—â–µ–Ω–∏–µ* –∑–∞–ø—É—Å—Ç–∏—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é. –í –Ω–µ–π –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –ª—é–¥–µ–π –≤ *–∫–Ω–∏–∂–∫—É* –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –∏—Ö –Ω–∞ *–≤—Å—Ç—Ä–µ—á—É*",
                            ParseMode.Markdown, replyMarkup: keyboard.Markup);

                        await UserDB.ChangeUserAction(context, chatId, Actions.NetworkingMenu);
                    }
                    else
                    {
                        await client.SendTextMessageAsync(
                            chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏!", ParseMode.Markdown);
                    }

                    break;

                case "–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥": // Add new parent tag
                    foreach (var parentTag in parentTags)
                    {
                        keyboard.AddRow(parentTag.Name);
                    }


                    await client.SendTextMessageAsync(
                        chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤–Ω—ã–π —Ç–µ–≥:",
                        ParseMode.Markdown, replyMarkup: keyboard.Markup);

                    await UserDB.ChangeUserAction(context, chatId, Actions.SearchingParentTag);

                    break;

                case "–í—ã–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ": // Returns to Action with Parent Tags? Deletes all tags that user has now
                    context.UserSearchingTags.RemoveRange(userTags); // Delete ALL previous tags
                    context.SaveChanges();

                    foreach (var parentTag in parentTags)
                    {
                        keyboard.AddRow(parentTag.Name);
                    }

                    await client.SendTextMessageAsync(
                        chatId, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥:",
                        ParseMode.Markdown, replyMarkup: keyboard.Markup);

                    await UserDB.ChangeUserAction(context, chatId, Actions.SearchingParentTag);

                    break;
            }
        }

        [UserAction(Actions.NetworkingMenu)] // Waiting for "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "–û–±—â–µ–Ω–∏–µ", etc.
        public async Task OnNetworkingMenu(ApplicationContext context, Message message, TelegramBotClient client)
        {
            var chatId = message.Chat.Id;
            var text = message.Text;

            User user = await UserDB.GetUserByChatId(context, chatId);

            TelegramKeyboard keyboard = new TelegramKeyboard(true);
            TelegramInlineKeyboard inline = new TelegramInlineKeyboard();
            StringBuilder builder = new StringBuilder();

            switch (text)
            {
                case "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":

                    keyboard.AddRow("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å");
                    keyboard.AddRow("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏");
                    keyboard.AddRow("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è");

                    List<string> myTags = user.UserTags
                        .Select(u => context.Tags.FirstOrDefault(t => t.TagId == u.TagId)?.Name).ToList();
                    List<string> searchTags = user.SearchingUserTags.Select(u =>
                        context.SearchingTags.FirstOrDefault(t => t.SearchingTagId == u.TagId)?.Name).ToList();


                    builder.AppendLine($"_–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è_: {user.FirstName} {user.LastName}");
                    builder.AppendLine($"_–ö–æ–º–ø–∞–Ω–∏—è –∏ –ø–æ–∑–∏—Ü–∏—è_: {user.CompanyAndPosition}");
                    builder.AppendLine();
                    builder.AppendLine($"_–ß–µ–º –ø–æ–ª–µ–∑–µ–Ω_: {user.Utility}");
                    builder.AppendLine($"_–û —á–µ–º –º–æ–∂–µ—Ç–µ –ø–æ–æ–±—â–∞—Ç—å—Å—è_: {user.Communication}");
                    builder.AppendLine();
                    builder.AppendLine("–õ–∏—á–Ω—ã–µ —Ç–µ–≥–∏: ");
                    builder.AppendLine($"`{string.Join(", ", myTags)}`");
                    builder.AppendLine();
                       builder.AppendLine("–¢–µ–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞: ");
                    builder.AppendLine($"`{string.Join(", ", searchTags)}`");

                    await client.SendTextMessageAsync(chatId, builder.ToString(), replyMarkup: keyboard.Markup,
                        parseMode: ParseMode.Markdown);
                    await UserDB.ChangeUserAction(context, chatId, Actions.MyProfileMenu);

                    break;

                case "–ó–∞–ø–∏—Å–Ω–∞—è –∫–Ω–∏–∂–∫–∞":
                    // –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç Contactbook

                    List<ContactsBook> contacts = user.Contacts.Take(4).ToList();
                    List<string> nums = new List<string>(4);
                    List<string> ids = new List<string>(4);


                    var tags = user.SearchingUserTags.Select(u =>
                        context.SearchingTags.FirstOrDefault(t => t.SearchingTagId == u.TagId)?.Name).ToList();

                    builder.AppendLine("_–í–∞—à–∏ —Ç–µ–≥–∏_");
                    builder.AppendLine($"`{string.Join(", ", tags)}`");
                    builder.AppendLine();
                    builder.AppendLine("*–í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã*");
                    builder.AppendLine();
                    int i = 1;

                    foreach (var contactsBook in contacts)
                    {
                        nums.Add(i.ToString());
                        ids.Add($"prof-{contactsBook.AnotherUserId}");
                        User another = await UserDB.GetUserByChatId(context, contactsBook.AnotherUserId);
                        builder.AppendLine(
                            $"*{i})*{another.FirstName} {another.LastName} {another.CompanyAndPosition}");
                        builder.AppendLine($"_–ß–µ–º –ø–æ–ª–µ–∑–µ–Ω_: {another.Utility}");
                        builder.AppendLine($"_–ö–æ–Ω—Ç–∞–∫—Ç_: " + (another.TelegramUserName != null ? "@" + another.TelegramUserName : "[inline mention of a user](tg://user?id={chatId})"));
                        builder.AppendLine();
                        i++;
                    }

                    inline = new TelegramInlineKeyboard();
                    if (user.Contacts.Count > 4)
                    {
                        inline
                            .AddTextRow("–í–ø–µ—Ä–µ–¥")
                            .AddCallbackRow("profpage-2");
                    }

                    inline
                        .AddTextRow(nums.ToArray())
                        .AddCallbackRow(ids.ToArray());

                    await client.SendTextMessageAsync(chatId, builder.ToString(), ParseMode.Markdown,
                        replyMarkup: inline.Markup);

                    break;

                case "–û–±—â–µ–Ω–∏–µ":

                    // –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–≥–∞–º, –≤—ã–±–∏—Ä–∞–µ–º –∏–∑ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ª–∏—á–Ω—ã–π —Ç–µ–≥ –∏–∑ —Ç–µ—Ö, —á—Ç–æ —É –Ω–∞—Å –≤ –ø–æ–∏—Å–∫–µ
                    User us = context.Users
                    .Include(u => u.UserTags)
                    .ThenInclude(t => t.Tag)
                    .FirstOrDefault(e =>
                        e.UserTags.Any(ut =>
                            user.SearchingUserTags.FirstOrDefault(t => t.TagId == ut.TagId) != null) &&
                        e.CurrentEventId == user.CurrentEventId);

                    
                    builder.AppendLine($@"{us.FirstName},  {us.CompanyAndPosition}");
                    builder.AppendLine();
                    builder.AppendLine($"_–¢–µ–≥–∏_: `{string.Join(", ",us.UserTags.Select(e => e.Tag.Name))}`");
                    builder.AppendLine();
                    builder.AppendLine($"_–ß–µ–º –ø–æ–ª–µ–∑–µ–Ω_: {us.Utility}");
                    builder.AppendLine();
                    builder.AppendLine($"_–û —á–µ–º –º–æ–∂–Ω–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è_: {us.Communication}");

                    string ch;

                    if (user.Contacts.Any(e => e.AnotherUserId == us.TelegramId))
                    {
                        ch = Utils.GetCheckmark();
                    }
                    else
                    {
                        ch = "–í –∫–Ω–∏–∂–∫—É";
                    }

                    inline = new TelegramInlineKeyboard();
                    inline
                        .AddTextRow("–ù–∞–∑–∞–¥", ch, "–í—Å—Ç—Ä–µ—á–∞", "–í–ø–µ—Ä–µ–¥")
                        .AddCallbackRow($"change-0", $"contact-{us.TelegramId}", $"meet-{us.TelegramId}", $"change-2");

                    await client.SendTextMessageAsync(chatId, builder.ToString(), ParseMode.Markdown,
                        replyMarkup: inline.Markup);

                    break;

                case "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é":
                    keyboard = new TelegramKeyboard();
                    keyboard.AddRow("–û –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏", "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é");
                    keyboard.AddRow("–†–µ–∂–∏–º –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–∞");
                    keyboard.AddRow("–ó–∞–ø–∏—Å–Ω–∞—è –∫–Ω–∏–∂–∫–∞");
                    keyboard.AddRow("–í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è");

                    await client.SendTextMessageAsync(
                        chatId,
                        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                        ParseMode.Markdown,
                        replyMarkup: keyboard.Markup);
                    await UserDB.ChangeUserAction(context, chatId, Actions.Profile);
                    break;
            }
        }

        [UserAction(Actions.MyProfileMenu)]
        public async Task OnMyProfileMenu(ApplicationContext context, Message message, TelegramBotClient client)
        {
            var chatId = message.Chat.Id;
            var text = message.Text;
            TelegramKeyboard keyboard = new TelegramKeyboard();

            switch (text)
            {
                case "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å":
                    keyboard.AddRow("–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è");
                    keyboard.AddRow("–ü–æ—á—Ç–∞");
                    keyboard.AddRow("–†–∞–±–æ—Ç–∞ –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å");
                    keyboard.AddRow("–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å");
                    keyboard.AddRow("–û —á–µ–º –ø–æ–æ–±—â–∞—Ç—å—Å—è");
                    keyboard.AddRow("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å");
                    await client.SendTextMessageAsync(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                        replyMarkup: keyboard.Markup);
                    await UserDB.ChangeUserAction(context, chatId, Actions.MyProfileEditing);

                    break;

                case "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏":
                    keyboard.AddRow("–¢–µ–≥–∏ –ø–æ–∏—Å–∫–∞");
                    keyboard.AddRow("–õ–∏—á–Ω—ã–µ —Ç–µ–≥–∏");
                    keyboard.AddRow("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å");
                    await client.SendTextMessageAsync(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                        replyMarkup: keyboard.Markup);
                    await UserDB.ChangeUserAction(context, chatId, Actions.TagsEditing);
                    break;

                case "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è":
                    keyboard.AddRow("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å");
                    keyboard.AddRow("–ó–∞–ø–∏—Å–Ω–∞—è –∫–Ω–∏–∂–∫–∞");
                    keyboard.AddRow("–û–±—â–µ–Ω–∏–µ");
                    keyboard.AddRow("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é");

                    await client.SendTextMessageAsync(chatId, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è",
                        replyMarkup: keyboard.Markup);
                    await UserDB.ChangeUserAction(context, chatId, Actions.NetworkingMenu);

                    break;
            }
        }

        [UserAction(Actions.TagsEditing)]
        public async Task OnTagsEditing(ApplicationContext context, Message message, TelegramBotClient client)
        {
            var chatId = message.Chat.Id;
            var text = message.Text;
            TelegramKeyboard keyboard = new TelegramKeyboard();

            List<Tag> parentTags = context.Tags.Where(x => x.Level == 1).ToList();

            foreach (var parentTag in parentTags)
            {
                keyboard.AddRow(parentTag.Name);
            }

            switch (text)
            {
                case "–¢–µ–≥–∏ –ø–æ–∏—Å–∫–∞":
                    await client.SendTextMessageAsync(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É", replyMarkup: keyboard.Markup);
                    await UserDB.ChangeUserAction(context, chatId, Actions.SearchingParentTag);
                    break;

                case "–õ–∏—á–Ω—ã–µ —Ç–µ–≥–∏":
                    await client.SendTextMessageAsync(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É", replyMarkup: keyboard.Markup);
                    await UserDB.ChangeUserAction(context, chatId, Actions.AddingParentTag);
                    break;

                case "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
                    keyboard.AddRow("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å");
                    keyboard.AddRow("–ó–∞–ø–∏—Å–Ω–∞—è –∫–Ω–∏–∂–∫–∞");
                    keyboard.AddRow("–û–±—â–µ–Ω–∏–µ");
                    keyboard.AddRow("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é");

                    await client.SendTextMessageAsync(chatId, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ø—Ä–æ—Ñ–∏–ª—å", replyMarkup: keyboard.Markup);
                    await UserDB.ChangeUserAction(context, chatId, Actions.NetworkingMenu);
                    break;
            }
        }

        [UserAction(Actions.MyProfileEditing)]
        public async Task OnMyProfileEditing(ApplicationContext context, Message message, TelegramBotClient client)
        {
            var chatId = message.Chat.Id;
            var text = message.Text;
            TelegramKeyboard keyboard = new TelegramKeyboard();

            switch (text)
            {
                case "–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è":
                    await client.SendTextMessageAsync(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:");
                    await UserDB.ChangeUserAction(context, chatId, Actions.WaitingForName);
                    break;

                case "–ü–æ—á—Ç–∞":
                    await client.SendTextMessageAsync(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:");
                    await UserDB.ChangeUserAction(context, chatId, Actions.WainingForEmail);
                    break;

                case "–†–∞–±–æ—Ç–∞ –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å":
                    await client.SendTextMessageAsync(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:");
                    await UserDB.ChangeUserAction(context, chatId, Actions.FirstQuestion);
                    break;

                case "–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å":
                    await client.SendTextMessageAsync(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:");
                    await UserDB.ChangeUserAction(context, chatId, Actions.SecondQuestion);
                    break;

                case "–û —á–µ–º –ø–æ–æ–±—â–∞—Ç—å—Å—è":
                    await client.SendTextMessageAsync(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:");
                    await UserDB.ChangeUserAction(context, chatId, Actions.ThirdQuestion);
                    break;

                case "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
                    keyboard.AddRow("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å");
                    keyboard.AddRow("–ó–∞–ø–∏—Å–Ω–∞—è –∫–Ω–∏–∂–∫–∞");
                    keyboard.AddRow("–û–±—â–µ–Ω–∏–µ");
                    keyboard.AddRow("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é");

                    await client.SendTextMessageAsync(chatId, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ø—Ä–æ—Ñ–∏–ª—å", replyMarkup: keyboard.Markup);
                    await UserDB.ChangeUserAction(context, chatId, Actions.NetworkingMenu);
                    break;
            }
        }

        #endregion
    }
}