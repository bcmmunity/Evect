using Evect.Models.DB;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;

namespace Evect.Models.Commands
{
    public class CommandHandler
    {

        [TelegramCommand("/start")]
        public async void OnStart(ApplicationContext context, Message message, TelegramBotClient client)
        {
            UserDB.AddLog(context,"start0");
            long chatId = message.Chat.Id;
            UserDB.AddLog(context, "start1");
            if (!await UserDB.IsUserExists(context, chatId))
            {
                UserDB.AddLog(context, "start2");
                UserDB.AddUser(context, chatId);
                UserDB.AddLog(context, "start3");
            }
            else if (!await UserDB.IsUserExistsAndAuthed(context, chatId))
            {
                UserDB.UserLogin(context, chatId);
                await client.SendTextMessageAsync(chatId, "–ú—ã —Ä–∞–¥—ã –≤–∞—Å —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å", ParseMode.Html);
            }
            else
            {
                await client.SendTextMessageAsync(chatId, "–ú—ã –≤–∞—Å —É–∂–µ –∑–Ω–∞–µ–º", ParseMode.Html);
            }

            string[][] actions = { new[] { "–í–æ–π—Ç–∏ –ø–æ –∏–≤–µ–Ω—Ç-–∫–æ–¥—É" }, new[] { "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç" } };
            await client.SendTextMessageAsync(chatId, "–ß—É–¥–Ω–µ–Ω—å–∫–æ " + "üòá" + " –ú–æ–∂–µ–º –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å", ParseMode.Markdown);
            await client.SendTextMessageAsync(chatId, "–£ –≤–∞—Å –µ—Å—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç? –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –≤–æ–π–¥–∏—Ç–µ –ø–æ **–∏–≤–µ–Ω—Ç-–∫–æ–¥—É** \n P.S.**–ò–≤–µ–Ω—Ç-–∫–æ–¥** –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø–∏—Å—å–º–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", ParseMode.Markdown, replyMarkup: TelegramKeyboard.GetKeyboard(actions));

        }


        [TelegramCommand("/stop")]
        public async void OnStop(ApplicationContext context, Message message, TelegramBotClient client)
        {
            long chatId = message.Chat.Id;
            
            User user = await UserDB.GetUserByChatId(context, chatId);

            if (await UserDB.IsUserExistsAndAuthed(context, chatId))
            {
                if (user.CurrentAction != Actions.DeleteOrNot)
                {
                    string[][] actions = { new[] { "–î–∞" }, new[] { "–ù–µ—Ç" } };
                    await client.SendTextMessageAsync(chatId, "**–°–æ—Ö—Ä–∞–Ω–∏—Ç—å** –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ <b>–ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å</b>",
                        ParseMode.Markdown,
                        replyMarkup: TelegramKeyboard.GetKeyboard(actions, true));

                    UserDB.ChangeUserAction(context, chatId, Actions.DeleteOrNot);
                }

            }
        }

        [TelegramCommand("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")]
        public async void OnProfile(ApplicationContext context, Message message, TelegramBotClient client)
        {
            long chatId = message.Chat.Id;
            User user = await UserDB.GetUserByChatId(context, chatId);
            
            if (string.IsNullOrEmpty(user.FirstName) || string.IsNullOrEmpty(user.LastName))//–∑–¥–µ—Å—å –º–± —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∞–¥–º–∏–Ω—Å–∫–∏–π –ª–∏ –∫–æ–¥
            {
                await client.SendTextMessageAsync(
                    chatId,
                    "–ü–æ—Ö–æ–∂–µ –º—ã –Ω–µ –≤—Å–µ –æ –≤–∞—Å –∑–Ω–∞–µ–º. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? –ü–æ–ø—Ä–æ—à—É –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª",
                    ParseMode.Html);
                UserDB.ChangeUserAction(context, chatId, Actions.WaitingForName);
                            
            } else if (string.IsNullOrEmpty(user.Email))
            {
                await client.SendTextMessageAsync(
                    chatId,
                    "–í–æ—Ç –º—ã –∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å, –∞ —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã?",
                    ParseMode.Html);
                UserDB.ChangeUserAction(context, chatId, Actions.WainingForEmail);
            }
            else
            {
                string[][] actions = { new[] { "–û –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏", "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é" }, new[] {"–†–µ–∂–∏–º –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–∞"}, new[] {"–ó–∞–ø–∏—Å–Ω–∞—è –∫–Ω–∏–∂–∫–∞"}, new[] {"–í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"} };
                await client.SendTextMessageAsync(
                    chatId,
                    "–ß—Ç–æ –Ω—É–∂–Ω–æ?",
                    ParseMode.Html,
                    replyMarkup: TelegramKeyboard.GetKeyboard(actions));
                    
                UserDB.ChangeUserAction(context, chatId, Actions.Profile);
            }
        }


        [TelegramCommand("–í–æ–π—Ç–∏ –ø–æ –∏–≤–µ–Ω—Ç-–∫–æ–¥—É")]
        public async void OnEnteringByCode(ApplicationContext context, Message message, TelegramBotClient client)
        {
            long chatId = message.Chat.Id;
            await client.SendTextMessageAsync(chatId, "–í–≤–µ–¥–∏—Ç–µ –∏–≤–µ–Ω—Ç-–∫–æ–¥",ParseMode.Html);

            UserDB.ChangeUserAction(context, chatId, Actions.WaitingForEventCode);
        }

     
      
       


    } 
}