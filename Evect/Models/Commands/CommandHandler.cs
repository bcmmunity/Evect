using System.Text;
using System.Threading.Tasks;
using Evect.Models.DB;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;

namespace Evect.Models.Commands
{
    public class CommandHandler
    {

        [TelegramCommand("/start")]
        public async Task OnStart(ApplicationContext context, Message message, TelegramBotClient client)
        {
         
            long chatId = message.Chat.Id;
            if (!await UserDB.IsUserExists(context, chatId))
            {
                 UserDB.AddUser(context, chatId, message.From.Username);
            }
            else if (!await UserDB.IsUserExistsAndAuthed(context, chatId))
            {
                await UserDB.UserLogin(context, chatId);
                await client.SendTextMessageAsync(chatId, "–ú—ã —Ä–∞–¥—ã –≤–∞—Å —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å", ParseMode.Html);
            }
            else
            {
                await client.SendTextMessageAsync(chatId, "–ú—ã –≤–∞—Å —É–∂–µ –∑–Ω–∞–µ–º", ParseMode.Html);
            }

            TelegramKeyboard keyboard = new TelegramKeyboard();
            keyboard.AddRow("–í–æ–π—Ç–∏ –ø–æ –∏–≤–µ–Ω—Ç-–∫–æ–¥—É");
            keyboard.AddRow("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç");

            await client.SendTextMessageAsync(chatId, "–ß—É–¥–Ω–µ–Ω—å–∫–æ " + "üòá" + " –ú–æ–∂–µ–º –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å", ParseMode.Markdown);
            await client.SendTextMessageAsync(chatId, "–£ –≤–∞—Å –µ—Å—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç? –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –≤–æ–π–¥–∏—Ç–µ –ø–æ *–∏–≤–µ–Ω—Ç-–∫–æ–¥—É* \n P.S.*–ò–≤–µ–Ω—Ç-–∫–æ–¥* –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø–∏—Å—å–º–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", ParseMode.Markdown, replyMarkup: keyboard.Markup);

        }


        [TelegramCommand("/stop")]
        public async Task OnStop(ApplicationContext context, Message message, TelegramBotClient client)
        {
            long chatId = message.Chat.Id;
            
            User user = await UserDB.GetUserByChatId(context, chatId);

            if (await UserDB.IsUserExistsAndAuthed(context, chatId))
            {
                if (user.CurrentAction != Actions.DeleteOrNot)
                {
                    TelegramKeyboard keyboard = new TelegramKeyboard();
                    keyboard.AddRow("–î–∞");
                    keyboard.AddRow("–ù–µ—Ç");
                    await client.SendTextMessageAsync(chatId, "**–°–æ—Ö—Ä–∞–Ω–∏—Ç—å** –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ <b>–ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å</b>",
                        ParseMode.Markdown,
                        replyMarkup: keyboard.Markup);

                    await UserDB.ChangeUserAction(context, chatId, Actions.DeleteOrNot);
                }

            }
        }

        [TelegramCommand("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")]
        public async Task OnProfile(ApplicationContext context, Message message, TelegramBotClient client)
        {
            long chatId = message.Chat.Id;
            User user = await UserDB.GetUserByChatId(context, chatId);
            StringBuilder builder = new StringBuilder();
            
            if (string.IsNullOrEmpty(user.Email))
            {
                builder.AppendLine(@"–Ø —Å–º–æ—Ç—Ä—é –º—ã –≤–∞—Å –Ω–µ –∑–Ω–∞–µ–º, –≤–æ–π–¥–∏—Ç–µ –ø–æ –∏–≤–µ–Ω—Ç –∫–æ–¥—É ");
                builder.AppendLine();
                builder.AppendLine(@"–í–≤–µ–¥–∏—Ç–µ –∏–≤–µ–Ω—Ç –∫–æ–¥");
                            
                await client.SendTextMessageAsync(
                    chatId,
                    builder.ToString(),
                    ParseMode.Markdown);
                await UserDB.ChangeUserAction(context, chatId, Actions.WaitingForEventCode);
            }
            else
            {
                
                TelegramKeyboard keyboard = new TelegramKeyboard();
                keyboard.AddRow("–û –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏", "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é");
                keyboard.AddRow("–†–µ–∂–∏–º –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–∞");
                keyboard.AddRow("–ó–∞–ø–∏—Å–Ω–∞—è –∫–Ω–∏–∂–∫–∞");
                keyboard.AddRow("–í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è");
                
                await client.SendTextMessageAsync(
                    chatId,
                    "–ß—Ç–æ –Ω—É–∂–Ω–æ?",
                    ParseMode.Html,
                    replyMarkup: keyboard.Markup);
                    
                await UserDB.ChangeUserAction(context, chatId, Actions.Profile);
            }
        }


        [TelegramCommand("–í–æ–π—Ç–∏ –ø–æ –∏–≤–µ–Ω—Ç-–∫–æ–¥—É")]
        public async Task OnEnteringByCode(ApplicationContext context, Message message, TelegramBotClient client)
        {
            long chatId = message.Chat.Id;
            await client.SendTextMessageAsync(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *–∏–≤–µ–Ω—Ç-–∫–æ–¥*",ParseMode.Markdown);

            await UserDB.ChangeUserAction(context, chatId, Actions.WaitingForEventCode);
        }

     
      
       


    } 
}